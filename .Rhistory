ylab("Attendance")
arima_plots[[col]] <- p
}
cols_to_forecast <- c("Aneurin Bevan", "Betsi Cadwaladr", "Cardiff & Vale", "Grouped_4_organisation", "Hywel Dda", "Powys Teaching", "Total")
forecast_list <- list()
arima_forecast_list <- list()
start_year <- year(min(training_data$YearMonth))
start_month <- month(min(training_data$YearMonth))
for (col in cols_to_forecast) {
ts_data <- ts(training_data[[col]], start = c(start_year, start_month), frequency = 12)
arima_model <- auto.arima(ts_data)
forecast_list[[col]] <- forecast(arima_model, h = h)
}
cols_to_forecast <- c("Aneurin Bevan", "Betsi Cadwaladr", "Cardiff & Vale", "Grouped_4_organisation", "Hywel Dda", "Powys Teaching", "Total")
forecast_list <- list()
arima_forecast_list <- list()
start_year <- year(min(training_data$YearMonth))
start_month <- month(min(training_data$YearMonth))
for (col in cols_to_forecast) {
ts_data <- ts(training_data[[col]], start = c(start_year, start_month), frequency = 12)
arima_model <- auto.arima(ts_data)
forecast_list[[col]] <- forecast(arima_model, h = h)
}
# Define the forecast horizon and validation period
h <- 12
validation_period <- 6
# Splitting the data into training and testing sets
training_data <- head(data2_wide, nrow(data2_wide) - validation_period)
test_data <- tail(data2_wide, validation_period)
cols_to_forecast <- c("Aneurin Bevan", "Betsi Cadwaladr", "Cardiff & Vale", "Grouped_4_organisation", "Hywel Dda", "Powys Teaching", "Total")
forecast_list <- list()
arima_forecast_list <- list()
start_year <- year(min(training_data$YearMonth))
start_month <- month(min(training_data$YearMonth))
for (col in cols_to_forecast) {
ts_data <- ts(training_data[[col]], start = c(start_year, start_month), frequency = 12)
arima_model <- auto.arima(ts_data)
forecast_list[[col]] <- forecast(arima_model, h = h)
}
arima_plots <- list()
for (col in cols_to_forecast) {
end_year_train <- year(max(training_data$YearMonth))
end_month_train <- month(max(training_data$YearMonth))
start_year_test <- ifelse(end_month_train == 12, end_year_train + 1, end_year_train)
start_month_test <- ifelse(end_month_train == 12, 1, end_month_train + 1)
actual_ts <- ts(test_data[[col]], start = c(start_year_test, start_month_test), frequency = 12)
p <- autoplot(forecast_list[[col]]) +
autolayer(actual_ts, series='Actual', PI=FALSE) +
labs(title = paste('Forecast vs Actual for', col)) +
theme(legend.position = 'bottom')+
ylab("Attendance")
arima_plots[[col]] <- p
}
print(arima_plots[['Total']])
```
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.pos = "H", out.extra = "")
data_grouped |>
group_by(Aggregated_Organisation) |>
summarise(`Number of patients` = sum(Data)) |>
gg_season() +
facet_wrap(vars(Aggregated_Organisation), scales = "free_y", nrow = 3)+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Seasonal plots of ED Attendances (by LHB)")
install.packages("feasts")
library(feasts)
data_grouped |>
group_by(Aggregated_Organisation) |>
summarise(`Number of patients` = sum(Data)) |>
gg_season() +
facet_wrap(vars(Aggregated_Organisation), scales = "free_y", nrow = 3)+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Seasonal plots of ED Attendances (by LHB)")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
fig.pos = "H", out.extra = "")
options(tinytex.verbose = TRUE)
# Required Libraries
library(zoo)
library(ggplot2)
library(lubridate)
library(tsibble)
library(tidyverse)
library(fpp3)
library(hts)
library(dplyr)
library(tidyr)
library(forecast)
library(Metrics)
library(purrr)
library(tidyr)
library(stats)
library(fable)
library(dplyr)
library(igraph)
library(ggraph)
library(feasts)
data <- read.csv("HLTH0037_ts_cleaned.csv")
# change data structure
data <- data %>%
mutate(YearMonth = yearmonth(YearMonth)) %>%
as_tsibble(index = YearMonth, key = c(Age_Code, Sex_ItemName_ENG, Hospital_Code, Hospital_ItemName_ENG))
# Aggregate the data
data_hts <- data %>%
aggregate_key(Organisation/Hospital_ItemName_ENG, attendance = sum(Data))
# Plot the aggregated data
data_hts |>
filter(is_aggregated(Hospital_ItemName_ENG)) |>
autoplot(attendance) +
labs(y = "Number of patients",
title = "Number of patients who enter ED") +
facet_wrap(vars(Organisation), scales = "free_y", ncol = 3) +
theme(legend.position = "none")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 0, hjust = 1))
# mutate Aggregated_Organisation due to the change of the health boards
data_grouped <- data %>%
mutate(Aggregated_Organisation = case_when(
Organisation %in% c("Cwm Taf", "Cwm Taf Morgannwg", "Abertawe Bro Morgannwg", "Swansea Bay") ~ "Grouped_4_organisation",
TRUE ~ Organisation
))
unique(data_grouped$Aggregated_Organisation)
data2_hts <- data_grouped %>%
group_by(Aggregated_Organisation) %>%
summarise(attendance = sum(Data))
data2_hts |>
ggplot(aes(x = YearMonth, y = attendance)) +
geom_line(stat = "identity") +
labs(y = "Number of patients",
title = "Number of patients who enter ED") +
facet_wrap(vars(Aggregated_Organisation), scales = "free_y", ncol = 3) +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data_grouped |>
group_by(Aggregated_Organisation) |>
summarise(`Number of patients` = sum(Data)) |>
gg_season() +
facet_wrap(vars(Aggregated_Organisation), scales = "free_y", nrow = 3)+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Seasonal plots of ED Attendances (by LHB)")
# Required Libraries
library(zoo)
library(ggplot2)
library(lubridate)
library(tsibble)
library(tidyverse)
library(fpp3)
library(hts)
library(dplyr)
library(tidyr)
library(forecast)
library(Metrics)
library(purrr)
library(tidyr)
library(stats)
library(fable)
library(dplyr)
library(igraph)
library(ggraph)
library(patchwork)
library(gridExtra)
data <- read.csv("HLTH0037_ts_cleaned.csv")
# change data structure
data <- data %>%
mutate(YearMonth = yearmonth(YearMonth)) %>%
as_tsibble(index = YearMonth, key = c(Age_Code, Sex_ItemName_ENG, Hospital_Code, Hospital_ItemName_ENG))
library(igraph)
# Nodes data
nodes_df <- data.frame(
name = c("All Wales",
"Betsi Cadwaladr", "Hywel Dda", "Grouped_4_organisation",
"Cardiff & Vale", "Aneurin Bevan", "Powys Teaching",
"Ysbyty Glan Clwyd", "Wrexham Maelor Hospital", "Colwyn Bay Community Hospital",
"Holywell Community Hospital", "Mold Community Hospital"),
stringsAsFactors = FALSE
)
# Edges data
edges_df <- data.frame(
from = c(rep("All Wales", 6),
rep("Betsi Cadwaladr", 5)),
to = c("Betsi Cadwaladr", "Hywel Dda", "Grouped_4_organisation",
"Cardiff & Vale", "Aneurin Bevan", "Powys Teaching",
"Ysbyty Glan Clwyd", "Wrexham Maelor Hospital", "Colwyn Bay Community Hospital",
"Holywell Community Hospital", "Mold Community Hospital"),
stringsAsFactors = FALSE
)
graph <- graph_from_data_frame(d = edges_df, vertices = nodes_df, directed = TRUE)
vertex_colors <- c("skyblue", rep("lightgreen", 6), rep("lightpink", 5))
# Plot the graph
plot(graph,
vertex.size = 15,
vertex.label = NA,  # Do not add labels
vertex.color = vertex_colors,
edge.arrow.size = 0.5,
layout = layout.reingold.tilford(graph, root = 1))
legend("bottomright",
legend = V(graph)$name,
fill = vertex_colors,
cex = 0.5,
title = "Nodes",
box.lty = 0)
# Aggregate the data
data_hts <- data %>%
aggregate_key(Organisation/Hospital_ItemName_ENG, attendance = sum(Data))
# Plot the aggregated data
data_hts |>
filter(is_aggregated(Hospital_ItemName_ENG)) |>
autoplot(attendance) +
labs(y = "Number of patients",
title = "Number of patients who enter ED") +
facet_wrap(vars(Organisation), scales = "free_y", ncol = 3) +
theme(legend.position = "none")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 0, hjust = 1))
```
data2_hts <- data_grouped %>%
group_by(Aggregated_Organisation) %>%
summarise(attendance = sum(Data))
data2_hts |>
ggplot(aes(x = YearMonth, y = attendance)) +
geom_line(stat = "identity") +
labs(y = "Number of patients",
title = "Number of patients who enter ED") +
facet_wrap(vars(Aggregated_Organisation), scales = "free_y", ncol = 3) +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
num_months <- length(unique(data2_hts$YearMonth))
num_orgs <- length(unique(data2_hts$Aggregated_Organisation))
# Correct assignment for YearMonth column
stl_df$YearMonth <- rep(unique(data2_hts$YearMonth), times = num_orgs)
stl_df_tidy <- stl_df %>%
tidyr::pivot_longer(cols = c(trend, seasonal, remainder),
names_to = "component",
values_to = "value")
stl_df_tidy %>%
ggplot(aes(x = YearMonth, y = value, color = component)) +
geom_line() +
facet_wrap(vars(Aggregated_Organisation), scales = "free_y", ncol = 3) +
labs(title = "STL Decomposition of ED Attendance",
y = "Number of Patients",
color = "Component") +
scale_color_manual(values = c("blue", "green", "red"),
breaks = c("trend", "seasonal", "remainder"),
labels = c("Trend", "Seasonal", "Residual")) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1))
#Change the data into wide format
data2_wide <- data_grouped %>%
group_by(Aggregated_Organisation) %>%
index_by(YearMonth) %>%
summarise(attendance = sum(Data)) %>%
pivot_wider(names_from = Aggregated_Organisation, values_from = attendance)
data2_wide <- as_tibble(data2_wide)
data2_wide <- data2_wide %>%
mutate(Total = rowSums(select(., c("Aneurin Bevan", "Betsi Cadwaladr", "Cardiff & Vale", "Grouped_4_organisation", "Hywel Dda", "Powys Teaching")), na.rm = TRUE))
# Define the forecast horizon and validation period
h <- 12
validation_period <- 6
# Splitting the data into training and testing sets
training_data <- head(data2_wide, nrow(data2_wide) - validation_period)
test_data <- tail(data2_wide, validation_period)
cols_to_forecast <- c("Aneurin Bevan", "Betsi Cadwaladr", "Cardiff & Vale", "Grouped_4_organisation", "Hywel Dda", "Powys Teaching", "Total")
forecast_list <- list()
arima_forecast_list <- list()
start_year <- year(min(training_data$YearMonth))
start_month <- month(min(training_data$YearMonth))
for (col in cols_to_forecast) {
ts_data <- ts(training_data[[col]], start = c(start_year, start_month), frequency = 12)
arima_model <- auto.arima(ts_data)
forecast_list[[col]] <- forecast(arima_model, h = h)
}
# Decompose time series for each health board using STL
stl_decompositions <- data2_hts %>%
split(.$Aggregated_Organisation) %>%
purrr::map(function(data){
ts_data <- ts(data$attendance, frequency = 12)
stl(ts_data, s.window = "periodic")
})
# Convert the decompositions to a tidy data frame
stl_df <- purrr::map2_dfr(stl_decompositions, names(stl_decompositions),
~{
time_series <- as.data.frame(.x$time.series)
time_series$Aggregated_Organisation <- .y
return(time_series)
})
num_months <- length(unique(data2_hts$YearMonth))
num_orgs <- length(unique(data2_hts$Aggregated_Organisation))
# Correct assignment for YearMonth column
stl_df$YearMonth <- rep(unique(data2_hts$YearMonth), times = num_orgs)
stl_df_tidy <- stl_df %>%
tidyr::pivot_longer(cols = c(trend, seasonal, remainder),
names_to = "component",
values_to = "value")
stl_df_tidy %>%
ggplot(aes(x = YearMonth, y = value, color = component)) +
geom_line() +
facet_wrap(vars(Aggregated_Organisation), scales = "free_y", ncol = 3) +
labs(title = "STL Decomposition of ED Attendance",
y = "Number of Patients",
color = "Component") +
scale_color_manual(values = c("blue", "green", "red"),
breaks = c("trend", "seasonal", "remainder"),
labels = c("Trend", "Seasonal", "Residual")) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1))
unique(data_grouped$Age_Code)
data_grouped_age <- data_grouped %>%
filter(Age_Code != "Unknown") %>%
mutate(Grouped_Age = case_when(
Age_Code == "0 to 4" ~ "0-4",
Age_Code == "5 to 17" ~ "5-17",
Age_Code %in% c("18 to 24", "25 to 29", "30 to 34", "35 to 39",
"40 to 44", "45 to 49", "50 to 54", "55 to 59",
"60 to 64", "65 to 69") ~ "18-69",
Age_Code %in% c("70 to 74", "75 to 79", "80 to 84", "85") ~ "70 and over",
TRUE ~ "Other"
))
data_gts <- data_grouped_age %>%
filter(Sex_ItemName_ENG != "Not Specified or invalid") %>%
group_by(Grouped_Age, Sex_ItemName_ENG) %>%
summarize(Number = sum(Data, na.rm = TRUE))
ggplot(data_gts, aes(x = Grouped_Age, y = Number)) +
geom_bar(stat = "identity") +
labs(y = "Number of patients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_wrap(~ Sex_ItemName_ENG, scales = "free")
#Change the data into wide format
data2_wide <- data_grouped %>%
group_by(Aggregated_Organisation) %>%
index_by(YearMonth) %>%
summarise(attendance = sum(Data)) %>%
pivot_wider(names_from = Aggregated_Organisation, values_from = attendance)
data2_wide <- as_tibble(data2_wide)
data2_wide <- data2_wide %>%
mutate(Total = rowSums(select(., c("Aneurin Bevan", "Betsi Cadwaladr", "Cardiff & Vale", "Grouped_4_organisation", "Hywel Dda", "Powys Teaching")), na.rm = TRUE))
# Define the forecast horizon and validation period
h <- 12
validation_period <- 6
# Splitting the data into training and testing sets
training_data <- head(data2_wide, nrow(data2_wide) - validation_period)
test_data <- tail(data2_wide, validation_period)
cols_to_forecast <- c("Aneurin Bevan", "Betsi Cadwaladr", "Cardiff & Vale", "Grouped_4_organisation", "Hywel Dda", "Powys Teaching", "Total")
forecast_list <- list()
arima_forecast_list <- list()
start_year <- year(min(training_data$YearMonth))
start_month <- month(min(training_data$YearMonth))
for (col in cols_to_forecast) {
ts_data <- ts(training_data[[col]], start = c(start_year, start_month), frequency = 12)
arima_model <- auto.arima(ts_data)
forecast_list[[col]] <- forecast(arima_model, h = h)
}
for (col in cols_to_forecast) {
end_year_train <- year(max(training_data$YearMonth))
end_month_train <- month(max(training_data$YearMonth))
start_year_test <- ifelse(end_month_train == 12, end_year_train + 1, end_year_train)
start_month_test <- ifelse(end_month_train == 12, 1, end_month_train + 1)
actual_ts <- ts(test_data[[col]], start = c(start_year_test, start_month_test), frequency = 12)
plot_forecast <- autoplot(forecast_list[[col]]) +
autolayer(actual_ts, series="Actual", PI=FALSE) +
labs(title = paste("Forecast vs Actual for", col)) +
theme(legend.position = "bottom")
print(plot_forecast)
}
ets_forecast_list <- list()
start_year <- year(min(training_data$YearMonth))
start_month <- month(min(training_data$YearMonth))
for (col in cols_to_forecast) {
ts_data <- ts(training_data[[col]], start = c(start_year, start_month), frequency = 12)
ets_model <- ets(ts_data)  # Use the ets function
forecast_list[[col]] <- forecast(ets_model, h = h)
}
for (col in cols_to_forecast) {
end_year_train <- year(max(training_data$YearMonth))
end_month_train <- month(max(training_data$YearMonth))
start_year_test <- ifelse(end_month_train == 12, end_year_train + 1, end_year_train)
start_month_test <- ifelse(end_month_train == 12, 1, end_month_train + 1)
actual_ts <- ts(test_data[[col]], start = c(start_year_test, start_month_test), frequency = 12)
plot_forecast <- autoplot(forecast_list[[col]]) +
autolayer(actual_ts, series="Actual", PI=FALSE) +
labs(title = paste("ETS Forecast vs Actual for", col)) +
theme(legend.position = "bottom")
print(plot_forecast)
}
ets_forecast_list <- list()
start_year <- year(min(training_data$YearMonth))
start_month <- month(min(training_data$YearMonth))
for (Aggregated_Organisation in cols_to_forecast) {
ts_data <- ts(training_data[[Aggregated_Organisation]], start = c(start_year, start_month), frequency = 12)
ets_model <- ets(ts_data)
forecast_list[[Aggregated_Organisation]] <- forecast(ets_model, h = h)
}
for (col in cols_to_forecast) {
end_year_train <- year(max(training_data$YearMonth))
end_month_train <- month(max(training_data$YearMonth))
start_year_test <- ifelse(end_month_train == 12, end_year_train + 1, end_year_train)
start_month_test <- ifelse(end_month_train == 12, 1, end_month_train + 1)
actual_ts <- ts(test_data[[col]], start = c(start_year_test, start_month_test), frequency = 12)
plot_forecast <- autoplot(forecast_list[[col]]) +
autolayer(actual_ts, series="Actual", PI=FALSE) +
labs(title = paste("ETS Forecast vs Actual for", col)) +
theme(legend.position = "bottom")
print(plot_forecast)
}
# Lists to store forecasts and error metrics
arima_forecast_list <- list()
ets_forecast_list <- list()
arima_error_metrics <- list()
ets_error_metrics <- list()
# Forecasting with ARIMA and ETS
for (col in cols_to_forecast) {
ts_data <- ts(training_data[[col]], start = c(start_year, start_month), frequency = 12)
# ARIMA model
arima_model <- auto.arima(ts_data)
arima_forecast <- forecast(arima_model, h = h)
arima_forecast_list[[col]] <- arima_forecast
# ETS model
tryCatch({
ets_model <- ets(ts_data)
ets_forecast <- forecast(ets_model, h = h)
ets_forecast_list[[col]] <- ets_forecast
}, error = function(e) {
cat("Error in forecasting for column:", col, "with message:", e$message, "\n")
})
}
for (col in cols_to_forecast) {
actual <- test_data[[col]]
arima_forecasted <- head(arima_forecast_list[[col]]$mean, validation_period)
# ARIMA metrics
arima_MAE <- mae(actual, arima_forecasted)
arima_RMSE <- rmse(actual, arima_forecasted)
arima_MAPE <- tryCatch(mape(actual, arima_forecasted), error = function(e) NA)
arima_error_metrics[[col]] <- list(MAE = arima_MAE, RMSE = arima_RMSE, MAPE = arima_MAPE)
# Check if ETS forecast exists for the column to avoid errors
if (!is.null(ets_forecast_list[[col]])) {
ets_forecasted <- head(ets_forecast_list[[col]]$mean, validation_period)
# ETS metrics
ets_MAE <- mae(actual, ets_forecasted)
ets_RMSE <- rmse(actual, ets_forecasted)
ets_MAPE <- tryCatch(mape(actual, ets_forecasted), error = function(e) NA)
ets_error_metrics[[col]] <- list(MAE = ets_MAE, RMSE = ets_RMSE, MAPE = ets_MAPE)
}
}
TableAccuracyMetrics <-
rbind(
# aggregate ARIMA accuracy metrics
as.data.frame(
do.call(rbind,unlist(arima_error_metrics, recursive=FALSE))
) |>
rename(Metric = V1) |>
rownames_to_column("LHB") |>
mutate(
Metric = round(Metric,3),
Model = "ARIMA"
),
# aggregate ETS accuracy metrics
as.data.frame(
do.call(rbind,unlist(ets_error_metrics, recursive=FALSE))
) |>
rename(Metric = V1) |>
rownames_to_column("LHB") |>
mutate(
Metric = round(Metric,3),
Model = "ETS"
)
) |>
## wrangle table from long to wide format
tidyr::pivot_wider(
names_from = Model,
values_from = Metric
)
## you can try and format this better...
TableAccuracyMetrics |> knitr::kable()
print(arima_plots[['Total']])
```
print(arima_plots[['Betsi Cadwaladr']])
print(arima_plots[['Cardiff & Vale']])
print(arima_plots[['Grouped_4_organisation']])
print(arima_plots[['Hywel Dda']])
print(arima_plots[['Hywel Dda']])
print(arima_plots[['Powys Teaching']])
ets_forecast_list <- list()
start_year <- year(min(training_data$YearMonth))
start_month <- month(min(training_data$YearMonth))
for (Aggregated_Organisation in cols_to_forecast) {
ts_data <- ts(training_data[[Aggregated_Organisation]], start = c(start_year, start_month), frequency = 12)
ets_model <- ets(ts_data)
forecast_list[[Aggregated_Organisation]] <- forecast(ets_model, h = h)
}
ets_plots <- list()
for (col in cols_to_forecast) {
end_year_train <- year(max(training_data$YearMonth))
end_month_train <- month(max(training_data$YearMonth))
start_year_test <- ifelse(end_month_train == 12, end_year_train + 1, end_year_train)
start_month_test <- ifelse(end_month_train == 12, 1, end_month_train + 1)
actual_ts <- ts(test_data[[col]], start = c(start_year_test, start_month_test), frequency = 12)
p <- autoplot(forecast_list[[col]]) +
autolayer(actual_ts, series='Actual', PI=FALSE) +
labs(title = paste('Forecast vs Actual for', col)) +
theme(legend.position = 'bottom')+
ylab("Attendance")
ets_plots[[col]] <- p
}
print(ets_plots[['Total']])
```
print(ets_plots[['Betsi Cadwaladr']])
print(ets_plots[['Cardiff & Vale']])
print(ets_plots[['Grouped_4_organisation']])
print(ets_plots[['Hywel Dda']])
print(ets_plots[['Powys Teaching']])
