fc_cv <- fit_cv %>%
forecast(h = 12) %>%
filter(.model == "comb") %>%
filter(Aggregated_Organisation == "<aggregated>")
View(fc_cv)
# Check the accuracy
forecasted_values <- fc_cv$.mean
accuracy_value <- accuracy(
as.data.frame(forecasted_values),as.data.frame(test_data$attendance))
library(tscount)
# Split data
training_data <- data_wales %>%
filter(YearMonth <= yearmonth("2022 Jun"))
test_data <- data_wales %>%
filter(YearMonth > yearmonth("2022 Jun")) %>%
filter(Aggregated_Organisation == "<aggregated>")
# average the three models
library(fable.tscount)
fit_cv<- training_data %>%
model(
naive_model = NAIVE(attendance),
ets_model = ETS(attendance),
tscount = TSCOUNT(attendance ~ trend() , link = "log", model = list(past_obs = 1:3))
)|> mutate (comb = (naive_model+ets_model+tscount)/3)
# Generate forecasts
fc_cv <- fit_cv %>%
forecast(h = 12) %>%
filter(.model == "comb") %>%
filter(Aggregated_Organisation == "<aggregated>")
# Check the accuracy
forecasted_values <- fc_cv$.mean
accuracy_value <- accuracy(
as.data.frame(forecasted_values),as.data.frame(test_data$attendance))
print(accuracy_value)
forecasted_values
test_data$attendance
# Check the accuracy
forecasted_values <- fc_cv$.mean
accuracy_value <- accuracy(
as.data.frame(forecasted_values),as.data.frame(test_data$attendance))
print(accuracy_value)
library(tscount)
# Split data
training_data <- data_wales %>%
filter(YearMonth <= yearmonth("2022 Jun"))
test_data <- data_wales %>%
filter(YearMonth > yearmonth("2022 Jun"))
test_data_filtered <- test_data %>%
filter(Aggregated_Organisation == "<aggregated>")
# Generate forecasts
fc_cv <- fit_cv %>%
forecast(h = 12) %>%
filter(.model == "comb")
# Check the accuracy
forecasted_values <- fc_cv$.mean
accuracy_value <- accuracy(
as.data.frame(forecasted_values),as.data.frame(test_data$attendance))
print(accuracy_value)
# Generate forecasts for aggregated
fc_cv <- fit_cv %>%
forecast(h = 12) %>%
filter(.model == "comb") %>%
filter(Aggregated_Organisation == "<aggregated>")
# Generate forecasts
fc_cv <- fit_cv %>%
forecast(h = 12) %>%
filter(.model == "comb")
# Generate forecasts for aggregated
fc_cv_filtered <- fit_cv %>%
forecast(h = 12) %>%
filter(.model == "comb") %>%
filter(Aggregated_Organisation == "<aggregated>")
# Generate forecasts for aggregated
fc_cv_filtered <- fit_cv %>%
forecast(h = 12) %>%
filter(.model == "comb") %>%
filter(Aggregated_Organisation == "<aggregated>")
# Check the accuracy
forecasted_values <- fc_cv_filtered$.mean
accuracy_value <- accuracy(
as.data.frame(forecasted_values),as.data.frame(test_data_filtered$attendance))
print(accuracy_value)
comparison_data <- data.frame(
Month = yearmonth(test_data$YearMonth),
Actual = test_data$attendance,
Forecasted = fc_cv$.mean,
Aggregated_Organisation = test_data$Aggregated_Organisation
)
comparison_data_long<- comparison_data %>%
pivot_longer(
cols = c(Actual, Forecasted),
names_to = "Type",
values_to = "Value"
)
unique_organisations <- unique(comparison_data_long$Aggregated_Organisation)
plot_list <- map(unique_organisations, ~{
ggplot(comparison_data_long[comparison_data_long$Aggregated_Organisation == .x,],
aes(x = Month, y = Value, color = Type)) +
geom_line() +
labs(title = paste("Forecasted vs Actual Values for", .x),
y = "Values") +
theme_minimal()
})
print(plot_list)
comparision_data_agg <- comparison_data %>%
filter(Aggregated_Organisation == "<aggregated>")
t.test(comparision_data_agg$Actual, comparision_data_agg$Forecasted)
mape <- mean(abs((comparison_data$Forecasted - comparison_data$Actual) / comparison_data$Actual)) * 100
mse <- mean((comparison_data$Forecasted - comparison_data$Actual)^2)
cat("Mean Absolute Percentage Error: ", mape, "%\n")
cat("Mean Squared Error: ", mse, "\n")
mape <- mean(abs((comparison_data_agg$Forecasted - comparison_data_agg$Actual) / comparison_data$Actual)) * 100
comparision_data_agg <- comparison_data %>%
filter(Aggregated_Organisation == "<aggregated>")
t.test(comparision_data_agg$Actual, comparision_data_agg$Forecasted)
mape <- mean(abs((comparison_data_agg$Forecasted - comparison_data_agg$Actual) / comparison_data$Actual)) * 100
mape <- mean(abs((comparison_data_agg$Forecasted - comparison_data_agg$Actual) / comparison_data_agg$Actual)) * 100
mape <- mean(abs((comparison_data_agg$Forecasted - comparison_data_agg$Actual) / comparison_data_agg$Actual)) * 100
t.test(comparision_data_agg$Actual, comparision_data_agg$Forecasted)
mape <- mean(abs((comparision_data_agg$Forecasted - comparison_data_agg$Actual) / comparison_data_agg$Actual)) * 100
mape <- mean(abs((comparision_data_agg$Forecasted - comparision_data_agg$Actual) / comparison_data_agg$Actual)) * 100
mape <- mean(abs((comparision_data_agg$Forecasted - comparision_data_agg$Actual) / comparision_data_agg$Actual)) * 100
mse <- mean((comparison_data_agg$Forecasted - comparison_data_agg$Actual)^2)
comparison_data_agg <- comparison_data %>%
filter(Aggregated_Organisation == "<aggregated>")
t.test(comparison_data_agg$Actual, comparision_data_agg$Forecasted)
mape <- mean(abs((comparison_data_agg$Forecasted - comparison_data_agg$Actual) / comparison_data_agg$Actual)) * 100
mse <- mean((comparison_data_agg$Forecasted - comparison_data_agg$Actual)^2)
cat("Mean Absolute Percentage Error: ", mape, "%\n")
cat("Mean Squared Error: ", mse, "\n")
comparison_data_long<- comparison_data %>%
pivot_longer(
cols = c(Actual, Forecasted),
names_to = "Type",
values_to = "Value"
)
unique_organisations <- unique(comparison_data_long$Aggregated_Organisation)
plot_list <- map(unique_organisations, ~{
ggplot(comparison_data_long[comparison_data_long$Aggregated_Organisation == .x,],
aes(x = Month, y = Value, color = Type)) +
geom_line() +
labs(title = paste("Forecasted vs Actual Values for", .x),
y = "Values") +
theme_minimal()
})
lapply(plot_list, print)
# Running t-tests
comparison_data %>%
group_by(Aggregated_Organisation) %>%
summarise(t_test_results = list(t.test(Actual, Forecasted))) %>%
unnest(cols = t_test_results)
# Running t-tests and extracting p-value and t-value
t_test_summary <- comparison_data %>%
group_by(Aggregated_Organisation) %>%
summarise(
t_value = list(t.test(Actual, Forecasted)$statistic),
p_value = list(t.test(Actual, Forecasted)$p.value)
) %>%
unnest(cols = c(t_value, p_value))
print(t_test_summary)
mape_results <- comparison_data %>%
group_by(Aggregated_Organisation) %>%
summarise(
MAPE = mean(abs((Forecasted - Actual) / Actual), na.rm = TRUE) * 100
)
print(mape_results)
# Check the accuracy
forecasted_values <- fc_cv_filtered$.mean
accuracy_value <- accuracy(
as.data.frame(forecasted_values),as.data.frame(test_data_filtered$attendance))
print(accuracy_value)
accuracy_value
forecasted_values
test_data_filtered$attendance
# Check the accuracy
forecasted_values <- fc_cv_filtered$.mean
accuracy_value <- accuracy(
as.data.frame(forecasted_values),as.data.frame(test_data_filtered$attendance))
print(accuracy_value)
View(fc_cv_filtered)
View(test_data_filtered)
View(comparison_data)
View(comparison_data)
comparison_data <- data.frame(
Month = yearmonth(test_data$YearMonth),
Actual = test_data$attendance,
Forecasted = fc_cv$.mean,
Aggregated_Organisation = test_data$Aggregated_Organisation
) rowwise()
print(test_data)
joined_data <- test_data %>%
left_join(fc_cv, by = "YearMonth")
joined_data <- as_tsibble(test_data) %>%
left_join(as_tsibble(fc_cv), by = "YearMonth")
str(test_data)
str(fc_cv)
library(dplyr)
library(tsibble)
joined_data <- as_tibble(test_data) %>%
left_join(as_tibble(fc_cv), by = "YearMonth")
View(joined_data)
joined_data <- as_tibble(test_data) %>%
left_join(as_tibble(fc_cv), by = c("YearMonth", "attendance"))
View(joined_data)
View(joined_data)
joined_data <- as_tibble(test_data) %>%
left_join(as_tibble(fc_cv), by = c("YearMonth", "attendance"))
joined_data
joined_data <- as_tibble(test_data) %>%
left_join(as_tibble(fc_cv), by = c("YearMonth", "Aggregated_Organisation"))
View(joined_data)
joined_data <- as_tibble(test_data) %>%
left_join(as_tibble(fc_cv), by = c("YearMonth", "Aggregated_Organisation")) %>%
select(-attendance.y)
joined_data <- as_tibble(test_data) %>%
left_join(as_tibble(fc_cv), by = c("YearMonth", "Aggregated_Organisation")) %>%
select(-attendance.y) %>%
rename(attenance = attendance.x)
joined_data_long<- joined_data %>%
pivot_longer(
cols = c(attenance, .mean),
names_to = "Type",
values_to = "Value"
)
View(joined_data_long)
joined_data <- as_tibble(test_data) %>%
left_join(as_tibble(fc_cv), by = c("YearMonth", "Aggregated_Organisation")) %>%
select(-attendance.y) %>%
rename(attenance = attendance.x) %>%
rename(forecast = .mean)
joined_data_long<- joined_data %>%
pivot_longer(
cols = c(attenance, forecast),
names_to = "Type",
values_to = "Value"
)
unique_organisations <- unique(joined_data_long$Aggregated_Organisation)
plot_list <- map(unique_organisations, ~{
ggplot(joined_data_long[joined_data_long$Aggregated_Organisation == .x,],
aes(x = Month, y = Value, color = Type)) +
geom_line() +
labs(title = paste("Forecasted vs Actual Values for", .x),
y = "Values") +
theme_minimal()
})
print(plot_list)
joined_data_long<- joined_data %>%
pivot_longer(
cols = c(attenance, forecast),
names_to = "Type",
values_to = "Value"
)
unique_organisations <- unique(joined_data_long$Aggregated_Organisation)
plot_list <- map(unique_organisations, ~{
ggplot(joined_data_long[joined_data_long$Aggregated_Organisation == .x,],
aes(x = YearMonth, y = Value, color = Type)) +
geom_line() +
labs(title = paste("Forecasted vs Actual Values for", .x),
y = "Values") +
theme_minimal()
})
print(plot_list)
# Running t-tests and extracting p-value and t-value
t_test_summary <- joined_data %>%
group_by(Aggregated_Organisation) %>%
summarise(
t_value = list(t.test(Actual, Forecasted)$statistic),
p_value = list(t.test(Actual, Forecasted)$p.value)
) %>%
unnest(cols = c(t_value, p_value))
# Running t-tests and extracting p-value and t-value
t_test_summary <- joined_data %>%
group_by(Aggregated_Organisation) %>%
summarise(
t_value = list(t.test(attendance, forecast)$statistic),
p_value = list(t.test(attendance, forecast)$p.value)
) %>%
unnest(cols = c(t_value, p_value))
joined_data_long<- joined_data %>%
pivot_longer(
cols = c(attendance, forecast),
names_to = "Type",
values_to = "Value"
)
joined_data <- as_tibble(test_data) %>%
left_join(as_tibble(fc_cv), by = c("YearMonth", "Aggregated_Organisation")) %>%
select(-attendance.y) %>%
rename(attendance = attendance.x) %>%
rename(forecast = .mean)
joined_data_long<- joined_data %>%
pivot_longer(
cols = c(attendance, forecast),
names_to = "Type",
values_to = "Value"
)
unique_organisations <- unique(joined_data_long$Aggregated_Organisation)
plot_list <- map(unique_organisations, ~{
ggplot(joined_data_long[joined_data_long$Aggregated_Organisation == .x,],
aes(x = YearMonth, y = Value, color = Type)) +
geom_line() +
labs(title = paste("Forecasted vs Actual Values for", .x),
y = "Values") +
theme_minimal()
})
print(plot_list)
# Running t-tests and extracting p-value and t-value
t_test_summary <- joined_data %>%
group_by(Aggregated_Organisation) %>%
summarise(
t_value = list(t.test(attendance, forecast)$statistic),
p_value = list(t.test(attendance, forecast)$p.value)
) %>%
unnest(cols = c(t_value, p_value))
print(t_test_summary)
mape_results <- comparison_data %>%
group_by(Aggregated_Organisation) %>%
summarise(
MAPE = mean(abs((forecast - attendance) / attendance), na.rm = TRUE) * 100
)
mape_results <- joined_data %>%
group_by(Aggregated_Organisation) %>%
summarise(
MAPE = mean(abs((forecast - attendance) / attendance), na.rm = TRUE) * 100
)
print(mape_results)
View(joined_data_long)
# Running t-tests and extracting p-value and t-value
t_test_summary <- joined_data %>%
group_by(Aggregated_Organisation, YearMonth) %>%
summarise(
t_value = list(t.test(attendance, forecast)$statistic),
p_value = list(t.test(attendance, forecast)$p.value)
) %>%
unnest(cols = c(t_value, p_value))
View(joined_data)
# Running t-tests and extracting p-value and t-value
t_test_summary <- joined_data %>%
rowwise() %>%
summarise(
t_value = list(t.test(attendance, forecast)$statistic),
p_value = list(t.test(attendance, forecast)$p.value)
) %>%
unnest(cols = c(t_value, p_value))
# Running t-tests and extracting p-value and t-value
t_test_summary <- joined_data %>%
summarise(
t_value = list(t.test(attendance, forecast)$statistic),
p_value = list(t.test(attendance, forecast)$p.value)
) %>%
unnest(cols = c(t_value, p_value))
print(t_test_summary)
mape_results <- joined_data %>%
group_by(Aggregated_Organisation) %>%
summarise(
MAPE = mean(abs((forecast - attendance) / attendance), na.rm = TRUE) * 100
)
print(mape_results)
# Running t-tests and extracting p-value and t-value
t_test_summary <- joined_data %>%
group_by(Aggregated_Organisation) %>%
summarise(
t_value = list(t.test(attendance, forecast)$statistic),
p_value = list(t.test(attendance, forecast)$p.value)
) %>%
unnest(cols = c(t_value, p_value))
print(t_test_summary)
# Running t-tests and extracting p-value and t-value
t_test_summary <- joined_data %>%
summarise(
t_value = list(t.test(attendance, forecast)$statistic),
p_value = list(t.test(attendance, forecast)$p.value)
) %>%
unnest(cols = c(t_value, p_value))
print(t_test_summary)
fit_wales <- data_wales |>
model(
naive_model = NAIVE(attendance),
ets_model = ETS(attendance),
tscount = TSCOUNT(attendance ~ trend() , link = "log", model = list(past_obs = 1:3))
)|> mutate (comb = (naive_model+ets_model+tscount)/3)
wales_rc <- fit_wales %>%
reconcile(bu = bottom_up(comb),
wls_ETS1 = min_trace(comb, method = "wls_struct"),
wls_ETS2 = min_trace(comb, method = "wls_var"),
mint_ETS = min_trace(comb, method = "mint_shrink")) %>%
forecast(h = 6)
forecast_wales_avg <- wales_rc %>%
as_tibble() %>%
group_by(Aggregated_Organisation, YearMonth) %>%
summarise(mean_attendance = mean(.mean, na.rm = TRUE), .groups = "drop")
forecast_wales_avg$Aggregated_Organisation <- factor(forecast_wales_avg$Aggregated_Organisation)
ggplot(forecast_wales_avg, aes(x = YearMonth, y = mean_attendance)) +
geom_line() +
labs(title = "Average Attendance Forecast",
x = "Year and Month",
y = "Average Attendance") +
facet_wrap(~Aggregated_Organisation, scales = "free_y") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 0, hjust = 1))
fc |>
filter(is_aggregated(Region)) |>
autoplot(
data_wales,
level = NULL
) +
labs(y = "attendance") +
facet_wrap(vars(Aggregated_Organisation), scales = "free_y")
fc |>
autoplot(
data_wales,
level = NULL
) +
labs(y = "attendance") +
facet_wrap(vars(Aggregated_Organisation), scales = "free_y")
data_full <- data_grouped_age |>
aggregate_key((Aggregated_Organisation/Hospital_ItemName_ENG) * Grouped_Age, attendance = sum(Data))
filter_date <- yearmonth("2022 Jun")
fc <- data_full %>%
filter(yearmonth(YearMonth) <= filter_date) %>%
model(
base = ETS(attendance)
) %>%
reconcile(
bu = bottom_up(base),
ols = min_trace(base, method = "ols"),
mint = min_trace(base, method = "mint_shrink"))  %>%
forecast(h = 18)
data_full <- data_grouped_age |>
aggregate_key((Aggregated_Organisation/Hospital_ItemName_ENG) * Grouped_Age, attendance = sum(Data))
filter_date <- yearmonth("2022 Jun")
fc <- data_full %>%
filter(yearmonth(YearMonth) <= filter_date) %>%
model(
base = ETS(attendance)
) %>%
reconcile(
bu = bottom_up(base),
mint = min_trace(base, method = "mint_shrink"))  %>%
forecast(h = 18)
data_full <- data_grouped_age |>
aggregate_key((Aggregated_Organisation/Hospital_ItemName_ENG) * Grouped_Age, attendance = sum(Data))
filter_date <- yearmonth("2022 Jun")
fc <- data_full %>%
filter(yearmonth(YearMonth) <= filter_date) %>%
model(
base = ETS(attendance)
) %>%
reconcile(
bu = bottom_up(base) %>%
forecast(h = 18)
data_full <- data_grouped_age |>
aggregate_key((Aggregated_Organisation/Hospital_ItemName_ENG) * Grouped_Age, attendance = sum(Data))
filter_date <- yearmonth("2022 Jun")
fc <- data_full %>%
filter(yearmonth(YearMonth) <= filter_date) %>%
model(
base = ETS(attendance)
) %>%
reconcile(
bu = bottom_up(base)) %>%
forecast(h = 18)
# Filter the forecast results for aggregated levels and plot
fc %>%
filter(is_aggregated(Hospital_ItemName_ENG), is_aggregated(Grouped_Age)) %>%
autoplot(
data_full %>% filter(yearmonth(YearMonth) >= yearmonth("2020 Jan")),level = NULL
) +
labs(y = "Attendance ('000)") +
facet_wrap(vars(Aggregated_Organisation), scales = "free_y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 0, hjust = 1))
# Filter the forecast results for aggregated levels and plot
fc %>%
filter(is_aggregated(Hospital_ItemName_ENG), is_aggregated(Grouped_Age)) %>%
autoplot(
data_full %>% filter(yearmonth(YearMonth) >= yearmonth("2020 Jan"))
) +
labs(y = "Attendance ('000)") +
facet_wrap(vars(Aggregated_Organisation), scales = "free_y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 0, hjust = 1))
# Filter the forecast results for aggregated levels and plot
fc %>%
filter(is_aggregated(Hospital_ItemName_ENG), !is_aggregated(Grouped_Age)) %>%
autoplot(
data_full %>% filter(yearmonth(YearMonth) >= yearmonth("2020 Jan")),level = NULL
) +
labs(y = "Attendance ('000)") +
facet_wrap(vars(Grouped_Age), scales = "free_y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 0, hjust = 1))
# Filter the forecast results for aggregated levels and plot
fc %>%
filter(is_aggregated(Aggregated_Organisation), !is_aggregated(Grouped_Age)) %>%
autoplot(
data_full %>% filter(yearmonth(YearMonth) >= yearmonth("2020 Jan")),level = NULL
) +
labs(y = "Attendance ('000)") +
facet_wrap(vars(Grouped_Age), scales = "free_y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 0, hjust = 1))
install.packages("xaringan")
# Assuming your `data_grouped` also has variables like `Date` and `Value` to plot
p <- ggplot(data_grouped, aes(x = Date, y = Value)) +
geom_line() +
labs(title = "Time Series of Aggregated Organisations and Hospitals",
x = "Date",
y = "Value") +
theme_minimal() +
facet_grid(Aggregated_Organisation ~ Hospital_ItemName_ENG, scales = "free_y", space = "free_y")
print(p)
