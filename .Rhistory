# Extract forecast values for the validation period
forecast_values <- matrix(forecasts_hts$bts[1:validation_length, ],
ncol = ncol(data2_wide) - 1)
# Create hierarchical time series object
hts_data <- hts(data2_wide[,-1])
forecasts_hts <- forecast(hts_data)
# Determine how many rows of forecasts there are
forecast_dims <- dim(forecasts_hts$bts)
validation_length <- 12
# Check if forecast.hts() only returns forecasted values or appends them
if (forecast_dims[1] == validation_length) {
forecast_values <- forecasts_hts$bts
} else {
# Extract the last `validation_length` rows of forecasts
forecast_values <- forecasts_hts$bts[(forecast_dims[1] - validation_length + 1):forecast_dims[1], ]
}
# Create hierarchical time series object
hts_data <- hts(data2_wide[,-1])
forecasts_hts <- forecast(hts_data)
# Determine how many rows of forecasts there are
forecast_dims <- dim(forecasts_hts$bts)
validation_length <- 12
# Ensure the range starts from a valid number
start_index <- max(1, (forecast_dims[1] - validation_length + 1))
if (forecast_dims[1] == validation_length) {
forecast_values <- forecasts_hts$bts
} else if (start_index <= forecast_dims[1]) {
# Extract the last `validation_length` rows of forecasts
forecast_values <- forecasts_hts$bts[start_index:forecast_dims[1], ]
} else {
stop("The forecast dimensions don't match with the expected validation length.")
}
# Convert forecast and actual values to time series objects
actual_values <- matrix(validation_data[,-1], ncol = ncol(data2_wide) - 1)
forecast_ts <- ts(forecast_values, start = c(year(validation_data$YearMonth[1]), month(validation_data$YearMonth[1])), frequency = 12)
actual_ts <- ts(actual_values, start = c(year(validation_data$YearMonth[1]), month(validation_data$YearMonth[1])), frequency = 12)
# Compute accuracy for each series
accuracy_list <- list()
for (i in 1:ncol(forecast_ts)) {
accuracy_list[[i]] <- forecast::accuracy(forecast_ts[,i], actual_ts[,i])
}
dim(forecast_ts)
dim(actual_ts)
# Create hierarchical time series object
hts_data <- hts(data2_wide[,-1])
forecasts_hts <- forecast(hts_data)
# Determine how many rows of forecasts there are
forecast_dims <- dim(forecasts_hts$bts)
validation_length <- 12
# Ensure the range starts from a valid number
start_index <- max(1, (forecast_dims[1] - validation_length + 1))
if (forecast_dims[1] == validation_length) {
forecast_values <- forecasts_hts$bts
} else if (start_index <= forecast_dims[1]) {
# Extract the last `validation_length` rows of forecasts
forecast_values <- forecasts_hts$bts[start_index:forecast_dims[1], ]
} else {
stop("The forecast dimensions don't match with the expected validation length.")
}
# Convert forecast and actual values to time series objects
actual_values <- matrix(validation_data[,-1], ncol = ncol(data2_wide) - 1)
forecast_ts <- ts(forecast_values, start = c(year(validation_data$YearMonth[1]), month(validation_data$YearMonth[1])), frequency = 12)
actual_ts <- ts(actual_values, start = c(year(validation_data$YearMonth[1]), month(validation_data$YearMonth[1])), frequency = 12)
# Compute accuracy for each series
accuracy_list <- list()
for (i in 1:ncol(forecast_ts)) {
accuracy_list[[i]] <- forecast::accuracy(forecast_ts[,i], actual_ts[,i])
}
# Create hierarchical time series object
hts_data <- hts(data2_wide[,-1])
forecasts_hts <- forecast(hts_data)
# Determine how many rows of forecasts there are
forecast_dims <- dim(forecasts_hts$bts)
validation_length <- 12
# Ensure the range starts from a valid number
start_index <- max(1, (forecast_dims[1] - validation_length + 1))
if (forecast_dims[1] == validation_length) {
forecast_values <- forecasts_hts$bts
} else if (start_index <= forecast_dims[1]) {
# Extract the last `validation_length` rows of forecasts
forecast_values <- forecasts_hts$bts[start_index:forecast_dims[1], ]
} else {
stop("The forecast dimensions don't match with the expected validation length.")
}
# Convert forecast and actual values to time series objects
actual_values <- matrix(validation_data[,-1], ncol = ncol(data2_wide) - 1)
forecast_ts <- ts(forecast_values, start = c(year(validation_data$YearMonth[1]), month(validation_data$YearMonth[1])), frequency = 12)
actual_ts <- ts(actual_values, start = c(year(validation_data$YearMonth[1]), month(validation_data$YearMonth[1])), frequency = 12)
# Compute accuracy for each series
accuracy_list <- list()
for (i in 1:ncol(forecast_ts)) {
forecasted_values <- forecast_ts[, i]
actual_values <- actual_ts[, i]
if(!is.numeric(forecasted_values) | !is.numeric(actual_values)) {
stop(paste("Non-numeric data found in column:", i))
}
accuracy_list[[i]] <- forecast::accuracy(forecasted_values, actual_values)
}
# Create hierarchical time series object
hts_data <- hts(data2_wide[,-1])
forecasts_hts <- forecast(hts_data)
# Determine how many rows of forecasts there are
forecast_dims <- dim(forecasts_hts$bts)
validation_length <- 12
# Ensure the range starts from a valid number
start_index <- max(1, (forecast_dims[1] - validation_length + 1))
if (forecast_dims[1] == validation_length) {
forecast_values <- forecasts_hts$bts
} else if (start_index <= forecast_dims[1]) {
# Extract the last `validation_length` rows of forecasts
forecast_values <- forecasts_hts$bts[start_index:forecast_dims[1], ]
} else {
stop("The forecast dimensions don't match with the expected validation length.")
}
# Convert forecast and actual values to time series objects
actual_values <- matrix(validation_data[,-1], ncol = ncol(data2_wide) - 1)
forecast_ts <- ts(forecast_values, start = c(year(validation_data$YearMonth[1]), month(validation_data$YearMonth[1])), frequency = 12)
actual_ts <- ts(actual_values, start = c(year(validation_data$YearMonth[1]), month(validation_data$YearMonth[1])), frequency = 12)
# Compute accuracy for each series
accuracy_list <- list()
forecast_ts[,1] <- as.numeric(as.character(forecast_ts[,1]))
for (i in 1:ncol(forecast_ts)) {
forecasted_values <- forecast_ts[, i]
actual_values <- actual_ts[, i]
if(!is.numeric(forecasted_values) | !is.numeric(actual_values)) {
stop(paste("Non-numeric data found in column:", i))
}
accuracy_list[[i]] <- forecast::accuracy(forecasted_values, actual_values)
}
# Create hierarchical time series object
hts_data <- hts(data2_wide[,-1])
forecasts_hts <- forecast(hts_data)
# Determine how many rows of forecasts there are
forecast_dims <- dim(forecasts_hts$bts)
validation_length <- 12
# Ensure the range starts from a valid number
start_index <- max(1, (forecast_dims[1] - validation_length + 1))
if (forecast_dims[1] == validation_length) {
forecast_values <- forecasts_hts$bts
} else if (start_index <= forecast_dims[1]) {
# Extract the last `validation_length` rows of forecasts
forecast_values <- forecasts_hts$bts[start_index:forecast_dims[1], ]
} else {
stop("The forecast dimensions don't match with the expected validation length.")
}
# Convert forecast and actual values to time series objects
actual_values <- matrix(validation_data[,-1], ncol = ncol(data2_wide) - 1)
forecast_ts <- ts(forecast_values, start = c(year(validation_data$YearMonth[1]), month(validation_data$YearMonth[1])), frequency = 12)
actual_ts <- ts(actual_values, start = c(year(validation_data$YearMonth[1]), month(validation_data$YearMonth[1])), frequency = 12)
# Compute accuracy for each series
accuracy_list <- list()
forecast_ts[,1] <- as.numeric(as.character(forecast_ts[,1]))
actual_ts[,1] <- as.numeric(as.character(actual_ts[,1]))
for (i in 1:ncol(forecast_ts)) {
forecasted_values <- forecast_ts[, i]
actual_values <- actual_ts[, i]
if(!is.numeric(forecasted_values) | !is.numeric(actual_values)) {
stop(paste("Non-numeric data found in column:", i))
}
accuracy_list[[i]] <- forecast::accuracy(forecasted_values, actual_values)
}
head(forecast_ts[, 1])
head(actual_ts[, 1])
validation_length <- 6
actual_ts <- as.ts(data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1])
forecast_ts <- forecasts_hts$bts
accuracy_list <- list()
for (i in 1:ncol(forecast_ts)) {
forecasted_values <- forecast_ts[, i]
actual_values <- actual_ts[, i]
if(!is.numeric(forecasted_values) || !is.numeric(actual_values)) {
stop(paste("Non-numeric data found in column:", i))
}
accuracy_list[[i]] <- forecast::accuracy(forecasted_values, actual_values)
}
validation_length <- 12
# Extract the last `validation_length` rows of your historical data
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), ]
# Create time series objects for actual and forecasted data
actual_ts <- ts(actual_data[, -1], start = start(actual_data$YearMonth), frequency = 12)
forecast_ts <- forecasts_hts$bts
forecast_ts
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- forecasts_hts$bts[(nrow(forecasts_hts$bts) - validation_length + 1):nrow(forecasts_hts$bts), ]
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- forecasts_hts$bts[1:validation_length, ]
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- forecasts_hts$bts[nrow(forecasts_hts$bts) - validation_length + 1:nrow(forecasts_hts$bts), ]
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- forecasts_hts$bts[(nrow(forecasts_hts$bts) - validation_length + 1):nrow(forecasts_hts$bts), ]
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- forecasts_hts$bts[, (ncol(forecasts_hts$bts) - validation_length + 1):ncol(forecasts_hts$bts)]
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- forecasts_hts$bts[, (ncol(forecasts_hts$bts) - validation_length + 1):ncol(forecasts_hts$bts)]
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- forecasts_hts$bts[, (nrow(forecasts_hts$bts) - validation_length + 1):(nrow(forecasts_hts$bts))]
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- forecasts_hts$bts[, (ncol(forecasts_hts$bts) - validation_length + 1):ncol(forecasts_hts$bts)]
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- forecasts_hts$bts[, (ncol(forecasts_hts$bts) - validation_length + 1):(ncol(forecasts_hts$bts))]
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- forecasts_hts$bts[, (ncol(forecasts_hts$bts) - validation_length + 1):ncol(forecasts_hts$bts)]
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- forecasts_hts$bts[, (ncol(forecasts_hts$bts) - validation_length + 1):ncol(forecasts_hts$bts)]
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- forecasts_hts$bts[, (ncol(forecasts_hts$bts) - validation_length + 1):ncol(forecasts_hts$bts), drop = FALSE]
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- as.matrix(forecasts_hts$bts)
forecasted_data <- forecasted_data[, (ncol(forecasted_data) - validation_length + 1):ncol(forecasted_data)]
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- as.matrix(forecasts_hts$bts)
forecasted_data <- forecasts_hts$bts[, (ncol(forecasts_hts$bts) - validation_length + 1):ncol(forecasts_hts$bts), drop = FALSE]
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- as.data.frame(forecasts_hts$allfcasts$Total)
forecasted_data <- forecasted_data[(nrow(forecasted_data) - validation_length + 1):nrow(forecasted_data), ]
# Initialize a list to store accuracy results
accuracy_list <- list()
# Loop through each series and compute accuracy
for (i in 1:ncol(forecasted_data)) {
forecasted_values <- forecasted_data[, i]
actual_values <- actual_data[, i]
if (!is.numeric(forecasted_values) || !is.numeric(actual_values)) {
stop(paste("Non-numeric data found in column:", i))
}
accuracy_list[[i]] <- forecast::accuracy(forecasted_values, actual_values)
}
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- as.data.frame(forecasts_hts$allfcasts$Total)
forecasted_data <- forecasted_data[(nrow(forecasted_data) - validation_length + 1):nrow(forecasted_data), ]
# Initialize a list to store accuracy results
accuracy_list <- list()
# Loop through each series and compute accuracy
for (i in 1:ncol(forecasted_data)) {
forecasted_values <- forecasted_data[, i]
if (!is.numeric(forecasted_values) || !is.numeric(actual_ts[, i])) {
stop(paste("Non-numeric data found in column:", i))
}
accuracy_list[[i]] <- forecast::accuracy(forecasted_values, actual_ts[, i])
}
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- as.data.frame(forecasts_hts$allfcasts$Total)
forecasted_data <- forecasted_data[(nrow(forecasted_data) - validation_length + 1):nrow(forecasted_data), ]
# Initialize a list to store accuracy results
# Initialize a list to store accuracy results
accuracy_list <- list()
# Loop through each series and compute accuracy
for (col_name in colnames(forecasted_data)) {
forecasted_values <- forecasted_data[, col_name]
if (!is.numeric(forecasted_values) || !is.numeric(actual_ts[, col_name])) {
stop(paste("Non-numeric data found in column:", col_name))
}
accuracy_list[[col_name]] <- forecast::accuracy(forecasted_values, actual_ts[, col_name])
}
# Combine accuracy results into a single data frame for easier viewing
accuracy_df <- do.call(rbind, accuracy_list)
row.names(accuracy_df) <- colnames(forecasted_data)
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- as.data.frame(forecasts_hts$allfcasts$Total)
forecasted_data <- forecasted_data[(nrow(forecasted_data) - validation_length + 1):nrow(forecasted_data), ]
# Initialize a list to store accuracy results
# Initialize a list to store accuracy results
accuracy_list <- list()
# Loop through each series and compute accuracy
for (col_name in colnames(forecasted_data)) {
forecasted_values <- forecasted_data[, col_name]
if (!is.numeric(forecasted_values) || !is.numeric(actual_ts[, col_name])) {
stop(paste("Non-numeric data found in column:", col_name))
}
accuracy_list[[col_name]] <- forecast::accuracy(forecasted_values, actual_ts[, col_name])
}
# Combine accuracy results into a single data frame for easier viewing
# Convert the list of accuracy results into a data frame
accuracy_df <- do.call(rbind, accuracy_list)
# Check if the data frame has dimensions (rows and columns)
if (is.null(dim(accuracy_df))) {
stop("The accuracy data frame does not have dimensions.")
} else {
# Assign row names
row.names(accuracy_df) <- colnames(forecasted_data)
}
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- as.data.frame(forecasts_hts$allfcasts$Total)
forecasted_data <- forecasted_data[(nrow(forecasted_data) - validation_length + 1):nrow(forecasted_data), ]
# Initialize a list to store accuracy results
accuracy_list <- list()
# Loop through each series and compute accuracy
for (col_name in colnames(forecasted_data)) {
forecasted_values <- forecasted_data[, col_name]
if (!is.numeric(forecasted_values) || !is.numeric(actual_ts[, col_name])) {
stop(paste("Non-numeric data found in column:", col_name))
}
accuracy_list[[col_name]] <- forecast::accuracy(forecasted_values, actual_ts[, col_name])
}
# Combine accuracy results into a single data frame for easier viewing
accuracy_list <- list()
# Loop through each series and compute accuracy
for (i in 1:ncol(forecasted_data)) {
forecasted_values <- forecasted_data[, i]
actual_values <- actual_data[, i]
# Check if both forecasted and actual values are numeric
if (!is.numeric(forecasted_values) || !is.numeric(actual_values)) {
stop(paste("Non-numeric data found in column:", i))
}
# Calculate accuracy measures
acc <- forecast::accuracy(forecasted_values, actual_values)
# Store the accuracy measures in the list
accuracy_list[[i]] <- data.frame(series = colnames(forecasted_data)[i], acc)
}
accuracy_list
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- as.data.frame(forecasts_hts$allfcasts$Total)
forecasted_data <- forecasted_data[(nrow(forecasted_data) - validation_length + 1):nrow(forecasted_data), ]
# Initialize a list to store accuracy results
accuracy_list <- list()
# Loop through each series and compute accuracy
for (col_name in colnames(forecasted_data)) {
forecasted_values <- forecasted_data[, col_name]
if (!is.numeric(forecasted_values) || !is.numeric(actual_ts[, col_name])) {
stop(paste("Non-numeric data found in column:", col_name))
}
accuracy_list[[col_name]] <- forecast::accuracy(forecasted_values, actual_ts[, col_name])
}
# Combine accuracy results into a single data frame
accuracy_df <- do.call(rbind, accuracy_list)
accuracy_df
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- as.data.frame(forecasts_hts$allfcasts$Total)
forecasted_data <- forecasted_data[(nrow(forecasted_data) - validation_length + 1):nrow(forecasted_data), ]
# Initialize an empty list to store accuracy measures
accuracy_list <- list()
# Loop through each series and compute accuracy
for (i in 1:ncol(forecasted_data)) {
forecasted_values <- forecasted_data[, i]
# Check if both forecasted and actual values are numeric
if (!is.numeric(forecasted_values) || !is.numeric(actual_ts[, i])) {
stop(paste("Non-numeric data found in column:", i))
}
# Calculate accuracy measures
acc <- forecast::accuracy(forecasted_values, actual_ts[, i])
# Store the accuracy measures in the list
accuracy_list[[i]] <- data.frame(series = colnames(forecasted_data)[i], acc)
}
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- as.data.frame(forecasts_hts$allfcasts$Total)
forecasted_data <- forecasted_data[(nrow(forecasted_data) - validation_length + 1):nrow(forecasted_data), ]
# Initialize an empty list to store accuracy measures
accuracy_list <- list()
# Loop through each series and compute accuracy
for (col_name in colnames(forecasted_data)) {
forecasted_values <- forecasted_data[, col_name]
# Check if both forecasted and actual values are numeric
if (!is.numeric(forecasted_values) || !is.numeric(actual_ts[, col_name])) {
stop(paste("Non-numeric data found in column:", col_name))
}
# Calculate accuracy measures
acc <- forecast::accuracy(forecasted_values, actual_ts[, col_name])
# Store the accuracy measures in the list
accuracy_list[[col_name]] <- data.frame(series = col_name, acc)
}
# Combine accuracy results into a single data frame
accuracy_df <- do.call(rbind, accuracy_list)
accuracy_df
# Define the validation length
validation_length <- 12
# Extract the actual data for the validation period
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), -1]
# Extract the forecasted data for the validation period
forecasted_data <- as.data.frame(forecasts_hts$allfcasts$Total)
forecasted_data <- forecasted_data[(nrow(forecasted_data) - validation_length + 1):nrow(forecasted_data), ]
# Initialize an empty list to store accuracy measures
accuracy_list <- list()
# Loop through each series in the hierarchical time series
for (i in 1:length(forecasts_hts$nodes)) {
# Extract the forecasted data for the current series
forecasted_values <- forecasts_hts$bts[i, ]
# Extract the actual data for the current series
actual_values <- actual_ts[, i]
# Check if both forecasted and actual values are numeric
if (!is.numeric(forecasted_values) || !is.numeric(actual_values)) {
stop(paste("Non-numeric data found in series:", i))
}
# Calculate accuracy measures
acc <- forecast::accuracy(forecasted_values, actual_values)
# Store the accuracy measures in the list
accuracy_list[[i]] <- data.frame(series = forecasts_hts$labels[i], acc)
}
# Create a validation length variable
validation_length <- 12  # You can adjust this as needed
# Extract the last `validation_length` rows of your historical data
actual_data <- data2_wide[(nrow(data2_wide) - validation_length + 1):nrow(data2_wide), ]
# Create time series objects for actual and forecasted data
actual_ts <- ts(actual_data[, -1], start = start(actual_data$YearMonth), frequency = 12)
forecast_ts <- forecasts_hts$bts
# Initialize a list to store accuracy measures for each series
accuracy_list <- list()
# Loop through each series and compute accuracy
for (i in 1:ncol(forecast_ts)) {
forecasted_values <- forecast_ts[, i]
actual_values <- actual_ts[, i]
if (!is.numeric(forecasted_values) || !is.numeric(actual_values)) {
stop(paste("Non-numeric data found in column:", i))
}
accuracy_list[[i]] <- forecast::accuracy(forecasted_values, actual_values)
}
str(actual_ts)
str(forecast_ts)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Required Libraries
library(zoo)
library(ggplot2)
library(lubridate)
library(tsibble)
library(tidyverse)
library(fpp3)
library(hts)
library(dplyr)
library(tidyr)
library(forecast)
data <- read.csv("HLTH0037_ts_cleaned.csv")
View(data)
data1 <- data %>%
mutate(YearMonth = yearmonth(YearMonth)) %>%
as_tsibble(index = YearMonth, key = c(Age_Code, Sex_ItemName_ENG, Hospital_Code, Hospital_ItemName_ENG))
