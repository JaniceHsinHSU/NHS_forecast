}
# Ensure summed_data is a simple dataframe or tibble
summed_data <- as.data.frame(summed_data)
results <- list()
for(org in unique_organisations) {
# Using base R subsetting
single_org_data <- summed_data[summed_data$Grouped_Organisation == org, ]
# Convert to time series. Assuming your data starts from the earliest available date and is continuous
ts_data <- ts(single_org_data$Total_Number, frequency = 12) # monthly data
# Forecast
forecasted <- forecast(auto.arima(ts_data), h=6)
# Store the forecast in the results
results[[org]] <- forecasted
}
# Convert summed_data explicitly to a data.frame
summed_data <- data.frame(summed_data)
results <- list()
for(org in unique_organisations) {
# Using base R subsetting
single_org_data <- summed_data[summed_data$Grouped_Organisation == org, ]
# Convert to time series. Assuming your data starts from the earliest available date and is continuous
ts_data <- ts(single_org_data$Total_Number, frequency = 12) # monthly data
# Forecast
forecasted <- forecast(auto.arima(ts_data), h=6)
# Store the forecast in the results
results[[org]] <- forecasted
}
# Convert summed_data explicitly to a data.frame
summed_data <- data.frame(summed_data)
results <- list()
for(org in unique_organisations) {
# Using base R subsetting
single_org_data <- summed_data[summed_data$Grouped_Organisation == org, ]
# Convert to time series. Assuming your data starts from the earliest available date and is continuous
ts_data <- ts(single_org_data$Total_Number, frequency = 12) # monthly data
# Forecast
forecasted <- forecast(auto.arima(ts_data), h=6)
# Store the forecast in the results
results[[org]] <- forecasted
}
# Convert summed_data explicitly to a data.frame
summed_data <- data.frame(summed_data)
results <- list()
for(org in unique_organisations) {
# Using dplyr for subsetting
single_org_data <- summed_data %>% filter(Grouped_Organisation == org)
# Convert to time series. Assuming your data starts from the earliest available date and is continuous
ts_data <- ts(single_org_data$Total_Number, frequency = 12) # monthly data
# Forecast
forecasted <- forecast(auto.arima(ts_data), h=6)
# Store the forecast in the results
results[[org]] <- forecasted
}
# Convert summed_data explicitly to a data.frame
summed_data <- data.frame(summed_data)
results <- list()
for(org in unique_organisations) {
# Using dplyr's filter explicitly
single_org_data <- dplyr::filter(summed_data, Grouped_Organisation == org)
# Convert to time series. Assuming your data starts from the earliest available date and is continuous
ts_data <- ts(single_org_data$Total_Number, frequency = 12) # monthly data
# Forecast
forecasted <- forecast(auto.arima(ts_data), h=6)
# Store the forecast in the results
results[[org]] <- forecasted
}
# Convert summed_data explicitly to a data.frame
summed_data <- data.frame(summed_data)
results <- list()
for(org in unique_organisations) {
# Using base R to create a mask for filtering
mask <- summed_data$Grouped_Organisation == org
single_org_data <- summed_data[mask, ]
# Convert to time series. Assuming your data starts from the earliest available date and is continuous
ts_data <- ts(single_org_data$Total_Number, frequency = 12) # monthly data
# Forecast
forecasted <- forecast(auto.arima(ts_data), h=6)
# Store the forecast in the results
results[[org]] <- forecasted
}
# Convert summed_data explicitly to a data.frame
summed_data <- data.frame(summed_data)
results <- list()
# Extract unique organisations directly from summed_data
unique_organisations <- unique(summed_data$Grouped_Organisation)
for(org in unique_organisations) {
# Explicitly match the rows
single_org_data <- summed_data[which(summed_data$Grouped_Organisation %in% org), ]
# Convert to time series
ts_data <- ts(single_org_data$Total_Number, frequency = 12) # monthly data
# Forecast
forecasted <- forecast(auto.arima(ts_data), h=6)
# Store the forecast in the results
results[[org]] <- forecasted
}
# Convert summed_data explicitly to a data.frame
summed_data <- data.frame(summed_data)
results <- list()
# Extract unique organisations directly from summed_data
unique_organisations <- unique(summed_data$Grouped_Organisation)
for(org in unique_organisations) {
# Explicitly match the rows
single_org_data <- summed_data[which(summed_data$Grouped_Organisation %in% org), ]
# Only continue if there's data available
if(nrow(single_org_data) > 0) {
# Convert to time series
ts_data <- ts(single_org_data$Total_Number, frequency = 12) # monthly data
# Forecast
forecasted <- forecast(auto.arima(ts_data), h=6)
# Store the forecast in the results
results[[org]] <- forecasted
} else {
warning(paste("No data available for", org))
}
}
# Display the results
results
results
# Convert summed_data explicitly to a data.frame
summed_data <- data.frame(summed_data)
results <- list()
# Extract unique organisations directly from summed_data
unique_organisations <- unique(summed_data$Grouped_Organisation)
for(org in unique_organisations) {
# Explicitly match the rows
single_org_data <- summed_data[which(summed_data$Grouped_Organisation %in% org), ]
cat("\nProcessing:", org, "\n")
cat("Number of rows:", nrow(single_org_data), "\n")
# Only continue if there's data available
if(nrow(single_org_data) > 0) {
# Convert to time series
ts_data <- ts(single_org_data$Total_Number, frequency = 12) # monthly data
# Forecast
forecasted <- forecast(auto.arima(ts_data), h=6)
# Store the forecast in the results
results[[org]] <- forecasted
} else {
warning(paste("No data available for", org))
}
}
# Display the results
results
View(summed_data)
unique_organisations <- unique(as.character(summed_data$Grouped_Organisation))
unique_organisations <- unique(as.character(summed_data$Grouped_Organisation))
unique_organisations <- unique_organisations[unique_organisations != "FALSE"]
results <- list()
for(org in unique_organisations) {
# Explicitly match the rows
single_org_data <- summed_data[which(summed_data$Grouped_Organisation %in% org), ]
cat("\nProcessing:", org, "\n")
cat("Number of rows:", nrow(single_org_data), "\n")
# Only continue if there's data available
if(nrow(single_org_data) > 0) {
# Convert to time series
ts_data <- ts(single_org_data$Total_Number, frequency = 12) # monthly data
# Forecast
forecasted <- forecast(auto.arima(ts_data), h=6)
# Store the forecast in the results
results[[org]] <- forecasted
} else {
warning(paste("No data available for", org))
}
}
# Display the results
results
str(summed_data)
summed_data$Date <- as.Date(as.yearmon(summed_data$YearMonth))
summed_data$Date <- as.Date(as.yearmonth(summed_data$YearMonth))
summed_data$Date <- as.Date(summed_data$YearMonth)
forecast_results_list <- summed_data %>%
group_by(Grouped_Organisation) %>%
do({
# Convert to ts object
time_series_data <- ts(.$Total_Number, frequency = 12, start = c(year(min(.$Date)), month(min(.$Date))))
# Fit ETS model
fit <- tryCatch(ets(time_series_data), error = function(e) NULL)
# Forecast 6 months ahead if fit is successful
if (!is.null(fit)) {
forecast_obj <- forecast(fit, h = 6)
data.frame(
Grouped_Organisation = unique(.$Grouped_Organisation),
Forecast_Date = seq.Date(from = max(.$Date) + months(1), by = "month", length.out = 6),
Forecasted_Value = forecast_obj$mean,
Lower_80 = forecast_obj$lower[,1],
Upper_80 = forecast_obj$upper[,1],
Lower_95 = forecast_obj$lower[,2],
Upper_95 = forecast_obj$upper[,2]
)
} else {
data.frame()  # Empty data frame for organizations that couldn't be forecasted
}
})
forecast_results_list <- summed_data %>%
group_by(Grouped_Organisation) %>%
do({
# Convert to ts object
time_series_data <- ts(.$Total_Number, frequency = 12, start = c(year(min(.$Date)), month(min(.$Date))))
# Fit ETS model
fit <- tryCatch(ets(time_series_data), error = function(e) NULL)
# Forecast 6 months ahead if fit is successful
if (!is.null(fit)) {
forecast_obj <- forecast(fit, h = 6)
data.frame(
Grouped_Organisation = rep(unique(.$Grouped_Organisation), times = 6),
Forecast_Date = seq.Date(from = max(.$Date) + months(1), by = "month", length.out = 6),
Forecasted_Value = forecast_obj$mean,
Lower_80 = forecast_obj$lower[,1],
Upper_80 = forecast_obj$upper[,1],
Lower_95 = forecast_obj$lower[,2],
Upper_95 = forecast_obj$upper[,2]
)
} else {
data.frame()  # Empty data frame for organizations that couldn't be forecasted
}
})
# Convert to a more familiar data frame structure
forecast_df <- bind_rows(forecast_results_list)
forecast_df
ggplot(forecast_df, aes(x = Forecast_Date, y = Forecasted_Value, group = Grouped_Organisation, color = Grouped_Organisation)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = Lower_80, ymax = Upper_80), alpha = 0.2, fill = "grey") +
geom_ribbon(aes(ymin = Lower_95, ymax = Upper_95), alpha = 0.1, fill = "grey") +
labs(title = "6-Month Ahead Forecasts", y = "Forecasted Value", x = "Date") +
theme_minimal() +
theme(legend.title = element_blank())
View(forecast_df)
ggplot(forecast_df, aes(x = Forecast_Date, y = Forecasted_Value, group = Grouped_Organisation, color = Grouped_Organisation)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = Lower_80, ymax = Upper_80), alpha = 0.2, fill = "grey") +
geom_ribbon(aes(ymin = Lower_95, ymax = Upper_95), alpha = 0.1, fill = "grey") +
labs(title = "6-Month Ahead Forecasts", y = "Forecasted Value", x = "Date") +
theme_minimal() +
theme(legend.title = element_blank()) +
facet_wrap(~Grouped_Organisation, scales = "free", ncol = 3)
ggplot(forecast_df, aes(x = Forecast_Date, y = Forecasted_Value, group = Grouped_Organisation, color = Grouped_Organisation)) +
geom_line(size = 1) +
labs(title = "6-Month Ahead Forecasts", y = "Forecasted Value", x = "Date") +
theme_minimal() +
theme(legend.title = element_blank()) +
facet_wrap(~Grouped_Organisation, scales = "free", ncol = 3)
forecast_df |>
autoplot(Forecasted_Value) +
labs(y = "Number of patients",
title = "Number of patients who enter ED") +
facet_wrap(vars(Grouped_Organisation), scales = "free_y", ncol = 3) +
theme(legend.position = "none")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(forecast_df, aes(x = Forecast_Date, y = Forecasted_Value, group = Grouped_Organisation, color = Grouped_Organisation)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = Lower_80, ymax = Upper_80), alpha = 0.2, fill = "grey") +
geom_ribbon(aes(ymin = Lower_95, ymax = Upper_95), alpha = 0.1, fill = "grey") +
labs(title = "6-Month Ahead Forecasts", y = "Forecasted Value", x = "Date") +
theme_minimal() +
theme(legend.title = element_blank()) +
facet_wrap(~Grouped_Organisation, scales = "free", ncol = 3)
table(forecast_df$Grouped_Organisation)
sum(is.na(forecast_df$Grouped_Organisation))
sum(is.na(forecast_df$Forecast_Date))
sum(is.na(forecast_df$Forecasted_Value))
str(forecast_df$Grouped_Organisation)
library(dplyr)
forecast_df %>%
group_by(Grouped_Organisation) %>%
summarise(count = n())
forecast_df$Grouped_Organisation <- as.character(forecast_df$Grouped_Organisation)
forecast_df$Grouped_Organisation <- factor(forecast_df$Grouped_Organisation)
table(forecast_df$Grouped_Organisation)
library(ggplot2)
ggplot(forecast_df, aes(x = Forecast_Date, y = Forecasted_Value, group = Grouped_Organisation, color = Grouped_Organisation)) +
# Plotting the forecasted values
geom_line(size = 1) +
# Highlighting the 80% confidence interval
geom_ribbon(aes(ymin = Lower_80, ymax = Upper_80), alpha = 0.2, fill = "grey") +
# Highlighting the 95% confidence interval
geom_ribbon(aes(ymin = Lower_95, ymax = Upper_95), alpha = 0.1, fill = "grey") +
# Defining the labels and title
labs(title = "6-Month Ahead Forecasts",
y = "Forecasted Value",
x = "Date",
color = "Organisation") +
# Using a minimal theme for a clean look
theme_minimal() +
# Modifying the legend title
theme(legend.title = element_blank()) +
# Adding facets to split the plots based on `Grouped_Organisation`
facet_wrap(~Grouped_Organisation, scales = "free", ncol = 3)
library(ggplot2)
ggplot(forecast_df, aes(x = Forecast_Date, y = Forecasted_Value, group = Grouped_Organisation, color = Grouped_Organisation)) +
geom_line(size = 1) +
# Highlighting the 80% confidence interval
geom_ribbon(aes(ymin = Lower_80, ymax = Upper_80), alpha = 0.2, fill = "grey") +
# Highlighting the 95% confidence interval
geom_ribbon(aes(ymin = Lower_95, ymax = Upper_95), alpha = 0.1, fill = "grey") +
labs(title = "6-Month Ahead Forecasts",
y = "Forecasted Value",
x = "Date",
color = "Organisation") +
theme_minimal() +
theme(legend.title = element_blank()) +
facet_wrap(~Grouped_Organisation, scales = "free", ncol = 3)+
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
data1_full
data1_full
View(data1_full)
View(data1_wide)
gts_obj
View(data)
summed_data <- data1_full %>%
group_by(Grouped_Organisation) %>%
summarise(Total_Number = sum(Number))
# Convert summed_data explicitly to a data.frame
summed_data <- data.frame(summed_data)
results <- list()
# Extract unique organisations directly from summed_data
unique_organisations <- unique(summed_data$Grouped_Organisation)
for(org in unique_organisations) {
# Explicitly match the rows
single_org_data <- summed_data[which(summed_data$Grouped_Organisation %in% org), ]
cat("\nProcessing:", org, "\n")
cat("Number of rows:", nrow(single_org_data), "\n")
# Only continue if there's data available
if(nrow(single_org_data) > 0) {
# Convert to time series
ts_data <- ts(single_org_data$Total_Number, frequency = 12) # monthly data
# Forecast
forecasted <- forecast(auto.arima(ts_data), h=6)
# Store the forecast in the results
results[[org]] <- forecasted
} else {
warning(paste("No data available for", org))
}
}
# Display the results
results
View(summed_data)
View(data1_full)
View(data)
library(dplyr)
data1_gts <- data1_grouped_age %>%
filter(Sex_ItemName_ENG != "Not Specified or invalid") %>%
group_by(Grouped_Age, Sex_ItemName_ENG) %>%
summarize(Number = sum(Number, na.rm = TRUE))
library(ggplot2)
p <- ggplot(data1_gts, aes(x = Grouped_Age, y = Number)) +
geom_bar(stat = "identity") +
labs(y = "Number of patients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_wrap(~ Sex_ItemName_ENG, scales = "free")
print(p)
subset_data
test_data_matrix
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(fpp3)
library(hts)
data <- read.csv("HLTH0037_ts_cleaned.csv")
data1 <- data %>%
mutate(YearMonth = yearmonth(YearMonth)) %>%
as_tsibble(index = YearMonth, key = c(Age_Code, Sex_ItemName_ENG, Hospital_Code, Hospital_ItemName_ENG))
data1 <- data1 %>%
mutate(Number = 1)
data1_hts <- data1 %>%
aggregate_key(Organisation/Hospital_ItemName_ENG, Number = sum(Number))
data1_hts |>
filter(is_aggregated(Hospital_ItemName_ENG)) |>
autoplot(Number) +
labs(y = "Number of patients",
title = "Number of patients who enter ED") +
facet_wrap(vars(Organisation), scales = "free_y", ncol = 3) +
theme(legend.position = "none")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
head(data1_hts)
data1_grouped <- data1 %>%
mutate(Grouped_Organisation = case_when(
Organisation %in% c("Cwm Taf", "Cwm Taf Morgannwg", "Abertawe Bro Morgannwg", "Swansea Bay") ~ "Grouped_organisation",
TRUE ~ Organisation
))
unique(data1_grouped$Grouped_Organisation)
data2_hts |>
filter(is_aggregated(Grouped_Organisation)) %>%
ggplot(aes(x = YearMonth, y = Number)) +
geom_line(stat = "identity") +
labs(y = "Number of patients",
title = "Number of patients who enter ED") +
facet_wrap(vars(Grouped_Organisation), scales = "free_y", ncol = 3) +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data2_hts |>
filter(is_aggregated(Grouped_Organisation)) %>%
ggplot(aes(x = YearMonth, y = Number)) +
geom_line(stat = "identity") +
labs(y = "Number of patients",
title = "Number of patients who enter ED") +
facet_wrap(vars(Grouped_Organisation), scales = "free_y", ncol = 3) +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data2_hts |>
ggplot(aes(x = YearMonth, y = Number)) +
geom_line(stat = "identity") +
labs(y = "Number of patients",
title = "Number of patients who enter ED") +
facet_wrap(vars(Grouped_Organisation), scales = "free_y", ncol = 3) +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data2_hts |>
ggplot(aes(x = YearMonth, y = Number)) +
geom_line(stat = "identity") +
labs(y = "Number of patients",
title = "Number of patients who enter ED") +
facet_wrap(vars(Grouped_Organisation), scales = "free_y", ncol = 3) +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
stru(data2_hts)
library(tidyverse)
library(fpp3)
library(hts)
str(data2_hts)
library(dplyr)
# Summing up the Number for each YearMonth
total_data <- data2_hts %>%
group_by(YearMonth) %>%
summarise(Number = sum(Number, na.rm = TRUE)) %>%
mutate(Grouped_Organisation = "Total")
library(tsibble)
# Compute the total for each YearMonth
totals <- data2_hts %>%
index_by(YearMonth) %>%
summarise(Total = sum(Number, na.rm = TRUE))
# Merge the totals with the original data
data2_hts <- data2_hts %>%
left_join(totals, by = "YearMonth")
View(data2_hts)
str(data2_hts)
library(dplyr)
library(tidyr)
data2_wide <- data1_grouped %>%
group_by(Grouped_Organisation, YearMonth) %>%
summarise(Number = sum(Number)) %>%
pivot_wider(names_from = Grouped_Organisation, values_from = Number)
library(dplyr)
library(tidyr)
data2_wide <- data1_grouped %>%
group_by(Grouped_Organisation) %>%
index_by(YearMonth) %>%
summarise(Number = sum(Number)) %>%
pivot_wider(names_from = Grouped_Organisation, values_from = Number)
View(data2_wide)
data2_wide <- data2_wide %>%
mutate(Total = rowSums(select(., -YearMonth), na.rm = TRUE))
data2_wide <- data2_wide %>%
rowwise() %>%
mutate(Total = sum(c_across(where(is.numeric)), na.rm = TRUE)) %>%
ungroup()
View(data2_wide)
unique(data1_grouped$Age_Code)
data1_grouped_age <- data1_grouped %>%
filter(Age_Code != "Unknown") %>%
mutate(Grouped_Age = case_when(
Age_Code == "0 to 4" ~ "0-4",
Age_Code == "5 to 17" ~ "5-17",
Age_Code %in% c("18 to 24", "25 to 29", "30 to 34", "35 to 39",
"40 to 44", "45 to 49", "50 to 54", "55 to 59",
"60 to 64", "65 to 69") ~ "18-69",
Age_Code %in% c("70 to 74", "75 to 79", "80 to 84", "85") ~ "70 and over",
TRUE ~ "Other"
))
data1_gts <- data1_grouped_age %>%
filter(Sex_ItemName_ENG != "Not Specified or invalid") %>%
group_by(Grouped_Age, Sex_ItemName_ENG) %>%
summarize(Number = sum(Number, na.rm = TRUE))
ggplot(data1_gts, aes(x = Grouped_Age, y = Number)) +
geom_bar(stat = "identity") +
labs(y = "Number of patients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_wrap(~ Sex_ItemName_ENG, scales = "free")
head(data2_wide)
library(hts)
# Convert the data to the long format, which is required for hts
data2_long <- data2_wide %>%
pivot_longer(cols = -YearMonth, names_to = "Health_Board", values_to = "Number")
# Create the hierarchical time series object
hts_data <- hts(data2_long, characters = c(0, 15))
View(data2_long)
head(data2_long)
head(data2_long, 10)
library(dplyr)
library(tidyr)
library(hts)
# Convert to wide format
data2_wide <- data2_long %>%
spread(key = Health_Board, value = Number)
# Order columns such that "Total" is the first column
data2_wide <- data2_wide[, c("YearMonth", "Total", setdiff(names(data2_wide), c("YearMonth", "Total")))]
# Create the hierarchical time series object
# The 'Total' is already aggregated, so you can use the matrix as is
hts_data <- hts(data2_wide[,-1])  # exclude the YearMonth column for the matrix
# View the structure of the hts object
str(hts_data)
hts_data
library(forecast)
# Forecast using the hierarchical model
forecasts_hts <- forecast(hts_data)
# Plot the forecasts
plot(forecasts_hts)
data2_wide <- data1_grouped %>%
group_by(Grouped_Organisation) %>%
index_by(YearMonth) %>%
summarise(Number = sum(Number)) %>%
pivot_wider(names_from = Grouped_Organisation, values_from = Number)
head(data2_wide)
