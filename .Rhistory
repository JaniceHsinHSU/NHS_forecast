library(dplyr)
data <- read.csv("HLTH0037_ts_cleaned.csv")
data <- data %>%
mutate(YearMonth = yearmonth(YearMonth)) %>%
as_tsibble(index = YearMonth, key = c(Age_Code, Sex_ItemName_ENG, Hospital_Code, Hospital_ItemName_ENG))
data_hts <- data %>%
aggregate_key(Organisation/Hospital_ItemName_ENG, Number = sum(Data))
data_hts |>
filter(is_aggregated(Hospital_ItemName_ENG)) |>
autoplot(Number) +
labs(y = "Number of patients",
title = "Number of patients who enter ED") +
facet_wrap(vars(Organisation), scales = "free_y", ncol = 3) +
theme(legend.position = "none")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 0, hjust = 1))
data_grouped <- data %>%
mutate(Aggregated_Organisation = case_when(
Organisation %in% c("Cwm Taf", "Cwm Taf Morgannwg", "Abertawe Bro Morgannwg", "Swansea Bay") ~ "Grouped_4_organisation",
TRUE ~ Organisation
))
unique(data_grouped$Aggregated_Organisation)
data2_hts <- data_grouped %>%
group_by(Aggregated_Organisation) %>%
summarise(Number = sum(Data))
data2_hts |>
ggplot(aes(x = YearMonth, y = Number)) +
geom_line(stat = "identity") +
labs(y = "Number of patients",
title = "Number of patients who enter ED") +
facet_wrap(vars(Aggregated_Organisation), scales = "free_y", ncol = 3) +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Decompose time series for each health board using STL
stl_decompositions <- data2_hts %>%
split(.$Aggregated_Organisation) %>%
purrr::map(function(data){
ts_data <- ts(data$Number, frequency = 12)
stl(ts_data, s.window = "periodic")
})
# Convert the decompositions to a tidy data frame
stl_df <- purrr::map2_dfr(stl_decompositions, names(stl_decompositions),
~{
time_series <- as.data.frame(.x$time.series)
time_series$Aggregated_Organisation <- .y
return(time_series)
})
num_months <- length(unique(data2_hts$YearMonth))
num_orgs <- length(unique(data2_hts$Aggregated_Organisation))
# Correct assignment for YearMonth column
stl_df$YearMonth <- rep(unique(data2_hts$YearMonth), times = num_orgs)
stl_df_tidy <- stl_df %>%
tidyr::pivot_longer(cols = c(trend, seasonal, remainder),
names_to = "component",
values_to = "value")
stl_df_tidy %>%
ggplot(aes(x = YearMonth, y = value, color = component)) +
geom_line() +
facet_wrap(vars(Aggregated_Organisation), scales = "free_y", ncol = 3) +
labs(title = "STL Decomposition of ED Attendance",
y = "Number of Patients",
color = "Component") +
scale_color_manual(values = c("blue", "green", "red"),
breaks = c("trend", "seasonal", "remainder"),
labels = c("Trend", "Seasonal", "Residual")) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1))
unique(data_grouped$Age_Code)
data_grouped_age <- data_grouped %>%
filter(Age_Code != "Unknown") %>%
mutate(Grouped_Age = case_when(
Age_Code == "0 to 4" ~ "0-4",
Age_Code == "5 to 17" ~ "5-17",
Age_Code %in% c("18 to 24", "25 to 29", "30 to 34", "35 to 39",
"40 to 44", "45 to 49", "50 to 54", "55 to 59",
"60 to 64", "65 to 69") ~ "18-69",
Age_Code %in% c("70 to 74", "75 to 79", "80 to 84", "85") ~ "70 and over",
TRUE ~ "Other"
))
data_gts <- data_grouped_age %>%
filter(Sex_ItemName_ENG != "Not Specified or invalid") %>%
group_by(Grouped_Age, Sex_ItemName_ENG) %>%
summarize(Number = sum(Data, na.rm = TRUE))
ggplot(data_gts, aes(x = Grouped_Age, y = Number)) +
geom_bar(stat = "identity") +
labs(y = "Number of patients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_wrap(~ Sex_ItemName_ENG, scales = "free")
#Change the data into wide format
data2_wide <- data_grouped %>%
group_by(Aggregated_Organisation) %>%
index_by(YearMonth) %>%
summarise(Number = sum(Data)) %>%
pivot_wider(names_from = Aggregated_Organisation, values_from = Number)
data2_wide <- as_tibble(data2_wide)
data2_wide <- data2_wide %>%
mutate(Total = rowSums(select(., c("Aneurin Bevan", "Betsi Cadwaladr", "Cardiff & Vale", "Grouped_4_organisation", "Hywel Dda", "Powys Teaching")), na.rm = TRUE))
h <- 12
validation_period <- 6
training_data <- head(data2_wide, nrow(data2_wide) - validation_period)
test_data <- tail(data2_wide, validation_period)
cols_to_forecast <- c("Aneurin Bevan", "Betsi Cadwaladr", "Cardiff & Vale", "Grouped_4_organisation", "Hywel Dda", "Powys Teaching", "Total")
forecast_list <- list()
arima_forecast_list <- list()
start_year <- year(min(training_data$YearMonth))
start_month <- month(min(training_data$YearMonth))
for (col in cols_to_forecast) {
ts_data <- ts(training_data[[col]], start = c(start_year, start_month), frequency = 12)
arima_model <- auto.arima(ts_data)
forecast_list[[col]] <- forecast(arima_model, h = h)
}
for (col in cols_to_forecast) {
end_year_train <- year(max(training_data$YearMonth))
end_month_train <- month(max(training_data$YearMonth))
start_year_test <- ifelse(end_month_train == 12, end_year_train + 1, end_year_train)
start_month_test <- ifelse(end_month_train == 12, 1, end_month_train + 1)
actual_ts <- ts(test_data[[col]], start = c(start_year_test, start_month_test), frequency = 12)
plot_forecast <- autoplot(forecast_list[[col]]) +
autolayer(actual_ts, series="Actual", PI=FALSE) +
labs(title = paste("Forecast vs Actual for", col)) +
theme(legend.position = "bottom")
print(plot_forecast)
}
ets_forecast_list <- list()
start_year <- year(min(training_data$YearMonth))
start_month <- month(min(training_data$YearMonth))
for (col in cols_to_forecast) {
ts_data <- ts(training_data[[col]], start = c(start_year, start_month), frequency = 12)
ets_model <- ets(ts_data)  # Use the ets function
forecast_list[[col]] <- forecast(ets_model, h = h)
}
for (col in cols_to_forecast) {
end_year_train <- year(max(training_data$YearMonth))
end_month_train <- month(max(training_data$YearMonth))
start_year_test <- ifelse(end_month_train == 12, end_year_train + 1, end_year_train)
start_month_test <- ifelse(end_month_train == 12, 1, end_month_train + 1)
actual_ts <- ts(test_data[[col]], start = c(start_year_test, start_month_test), frequency = 12)
plot_forecast <- autoplot(forecast_list[[col]]) +
autolayer(actual_ts, series="Actual", PI=FALSE) +
labs(title = paste("ETS Forecast vs Actual for", col)) +
theme(legend.position = "bottom")
print(plot_forecast)
}
arima_forecast_list <- list()
ets_forecast_list <- list()
arima_error_metrics <- list()
ets_error_metrics <- list()
for (col in cols_to_forecast) {
ts_data <- ts(training_data[[col]], start = c(start_year, start_month), frequency = 12)
# ARIMA model
arima_model <- auto.arima(ts_data)
arima_forecast <- forecast(arima_model, h = h)
arima_forecast_list[[col]] <- arima_forecast
# ETS model
tryCatch({
ets_model <- ets(ts_data)
ets_forecast <- forecast(ets_model, h = h)
ets_forecast_list[[col]] <- ets_forecast
}, error = function(e) {
cat("Error in forecasting for column:", col, "with message:", e$message, "\n")
})
}
for (col in cols_to_forecast) {
actual <- test_data[[col]]
arima_forecasted <- head(arima_forecast_list[[col]]$mean, validation_period)
# ARIMA metrics
arima_MAE <- mae(actual, arima_forecasted)
arima_RMSE <- rmse(actual, arima_forecasted)
arima_MAPE <- tryCatch(mape(actual, arima_forecasted), error = function(e) NA)
arima_error_metrics[[col]] <- list(MAE = arima_MAE, RMSE = arima_RMSE, MAPE = arima_MAPE)
# Check if ETS forecast exists for the column to avoid errors
if (!is.null(ets_forecast_list[[col]])) {
ets_forecasted <- head(ets_forecast_list[[col]]$mean, validation_period)
# ETS metrics
ets_MAE <- mae(actual, ets_forecasted)
ets_RMSE <- rmse(actual, ets_forecasted)
ets_MAPE <- tryCatch(mape(actual, ets_forecasted), error = function(e) NA)
ets_error_metrics[[col]] <- list(MAE = ets_MAE, RMSE = ets_RMSE, MAPE = ets_MAPE)
}
}
for (col in cols_to_forecast) {
cat("\nAccuracy metrics for:", col, "\n")
cat("--------------------------\n")
cat("ARIMA:\n")
print(arima_error_metrics[[col]])
cat("ETS:\n")
print(ets_error_metrics[[col]])
cat("\n")
# Add a line break to separate the next set of metrics horizontally
cat("----------------------------------------------------\n")
}
data_hts <- data_grouped_age |>
aggregate_key(Aggregated_Organisation / Hospital_ItemName_ENG * Grouped_Age, attendance = sum(Data))
data_wales <- data_grouped_age |>
aggregate_key(Aggregated_Organisation, attendance = sum(Data))
library(tscount)
# Split data
training_data <- data_wales %>%
filter(YearMonth <= yearmonth("2022 Jun"))
test_data <- data_wales %>%
filter(YearMonth > yearmonth("2022 Jun"))
fit<- training_data %>%
model(
naive_model = NAIVE(attendance),
ets_model = ETS(attendance),
tscount = TSCOUNT(attendance ~ trend() , link = "log", model = list(past_obs = 1:3))
)|> mutate (comb = (naive_model+ets_model+tscount)/3)
library(fable.tscount)
fit<- training_data %>%
model(
naive_model = NAIVE(attendance),
ets_model = ETS(attendance),
tscount = TSCOUNT(attendance ~ trend() , link = "log", model = list(past_obs = 1:3))
)|> mutate (comb = (naive_model+ets_model+tscount)/3)
# Generate forecasts
fc <- fit %>%
forecast(h = 12) %>%
filter(.model == "comb")
# Validate: Check forecast and test_data lengths
cat("Length of forecast: ", nrow(fc), "\n")
cat("Length of test data: ", nrow(test_data), "\n")
# Check the accuracy
forecasted_values <- fc$.mean
accuracy_value <- accuracy(
as.data.frame(forecasted_values),as.data.frame(test_data$attendance))
print(accuracy_value)
comparison_data <- data.frame(
Month = test_data$YearMonth,
Actual = test_data$attendance,
Forecasted = fc$.mean
)
ggplot(comparison_data, aes(x = Month)) +
geom_line(aes(y = Actual, colour = "Actual")) +
geom_line(aes(y = Forecasted, colour = "Forecasted"), linetype = "dashed") +
labs(title = "Forecasted vs Actual Values",
y = "Values",
colour = "Legend") +
theme_minimal()
t.test(comparison_data$Actual, comparison_data$Forecasted)
mape <- mean(abs((comparison_data$Forecasted - comparison_data$Actual) / comparison_data$Actual)) * 100
mse <- mean((comparison_data$Forecasted - comparison_data$Actual)^2)
cat("Mean Absolute Percentage Error: ", mape, "%\n")
cat("Mean Squared Error: ", mse, "\n")
forecast_wales <- data_wales |>
model(ets = ETS(attendance)) |>
reconcile(bu = bottom_up(ets),
wls_ETS1 = min_trace(ets, method = "wls_struct"),
wls_ETS2 = min_trace(ets, method = "wls_var"),
mint_ETS = min_trace(ets, method = "mint_shrink")) %>%
forecast(h = 6)
forecast_wales
View(forecast_wales)
print(forecast_wales
p
print(forecast_wales)
forecast_wales_avg %>%
group_by(Aggregated_Organisation, YearMonth) %>%
summarise(mean_attendance = mean(.mean, na.rm = TRUE)) %>%
ungroup()
forecast_wales_avg <- forecast_wales %>%
group_by(Aggregated_Organisation, YearMonth) %>%
summarise(mean_attendance = mean(.mean, na.rm = TRUE)) %>%
ungroup()
forecast_wales_avg <- forecast_wales %>%
as_tibble() %>%
group_by(Aggregated_Organisation, YearMonth) %>%
summarise(mean_attendance = mean(.mean, na.rm = TRUE), .groups = "drop")
ggplot(forecast_wales_avg, aes(x = YearMonth, y = mean_attendance)) +
geom_line() +
labs(title = "Average Attendance Forecast",
x = "Year and Month",
y = "Average Attendance") +
facet_wrap(~Aggregated_Organisation, scales = "free_y") +
theme_minimal()
ggplot(forecast_wales_avg, aes(x = YearMonth, y = mean_attendance)) +
geom_line() +
labs(title = "Average Attendance Forecast",
x = "Year and Month",
y = "Average Attendance") +
theme_minimal()
ggplot(forecast_wales_avg, aes(x = YearMonth, y = mean_attendance, group = Aggregated_Organisation)) +
geom_line() +
labs(title = "Average Attendance Forecast",
x = "Year and Month",
y = "Average Attendance") +
facet_wrap(~Aggregated_Organisation, scales = "free_y") +
theme_minimal()
ggplot(forecast_wales_avg, aes(x = YearMonth, y = mean_attendance)) +
geom_line() +
labs(title = "Average Attendance Forecast",
x = "Year and Month",
y = "Average Attendance") +
facet_wrap(~Aggregated_Organisation, scales = "free_y") +
theme_minimal()
View(forecast_wales_avg)
print(forecast_wales_avg)
ggplot(forecast_wales_avg, aes(x = YearMonth, y = mean_attendance)) +
geom_line() +
labs(title = "Average Attendance Forecast",
x = "Year and Month",
y = "Average Attendance") +
facet_wrap(~Aggregated_Organisation, scales = "free_y") +
theme_minimal()
forecast_wales_avg %>%
group_by(YearMonth, Aggregated_Organisation) %>%
summarise(n = n()) %>%
filter(n > 1)
ggplot(forecast_wales_avg, aes(x = YearMonth, y = mean_attendance, group = Aggregated_Organisation)) +
geom_line() +
labs(title = "Average Attendance Forecast",
x = "Year and Month",
y = "Average Attendance") +
facet_wrap(~Aggregated_Organisation, scales = "free_y") +
theme_minimal()
str(forecast_wales_avg)
forecast_wales_avg$YearMonth <- as.Date(forecast_wales_avg$YearMonth, format = "%Y %b")
ggplot(forecast_wales_avg, aes(x = YearMonth, y = mean_attendance, group = Aggregated_Organisation)) +
geom_line() +
labs(title = "Average Attendance Forecast",
x = "Year and Month",
y = "Average Attendance") +
facet_wrap(~Aggregated_Organisation, scales = "free_y") +
theme_minimal()
forecast_wales_avg$Aggregated_Organisation <- droplevels(forecast_wales_avg$Aggregated_Organisation)
levels(forecast_wales_avg$Aggregated_Organisation)
forecast_wales_avg$YearMonth <- as.Date(forecast_wales_avg$YearMonth, format = "%Y %b")
forecast_wales_avg$Aggregated_Organisation <- factor(forecast_wales_avg$Aggregated_Organisation)
ggplot(forecast_wales_avg, aes(x = YearMonth, y = mean_attendance)) +
geom_line() +
labs(title = "Average Attendance Forecast",
x = "Year and Month",
y = "Average Attendance") +
facet_wrap(~Aggregated_Organisation, scales = "free_y") +
theme_minimal()
forecast_wales_avg <- forecast_wales %>%
as_tibble() %>%
group_by(Aggregated_Organisation, YearMonth) %>%
summarise(mean_attendance = mean(.mean, na.rm = TRUE), .groups = "drop")
#forecast_wales_avg$YearMonth <- as.Date(forecast_wales_avg$YearMonth, format = "%Y %b")
forecast_wales_avg$Aggregated_Organisation <- factor(forecast_wales_avg$Aggregated_Organisation)
ggplot(forecast_wales_avg, aes(x = YearMonth, y = mean_attendance)) +
geom_line() +
labs(title = "Average Attendance Forecast",
x = "Year and Month",
y = "Average Attendance") +
facet_wrap(~Aggregated_Organisation, scales = "free_y") +
theme_minimal()
ggplot(forecast_wales_avg, aes(x = YearMonth, y = mean_attendance)) +
geom_line() +
labs(title = "Average Attendance Forecast",
x = "Year and Month",
y = "Average Attendance") +
facet_wrap(~Aggregated_Organisation, scales = "free_y") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 0, hjust = 1))
forecast_wales_avg <- forecast_wales %>%
as_tibble() %>%
group_by(Aggregated_Organisation, YearMonth) %>%
summarise(mean_attendance = mean(.mean, na.rm = TRUE), .groups = "drop")
ggplot(forecast_wales_avg, aes(x = YearMonth, y = mean_attendance)) +
geom_line() +
labs(title = "Average Attendance Forecast",
x = "Year and Month",
y = "Average Attendance") +
facet_wrap(~Aggregated_Organisation, scales = "free_y") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 0, hjust = 1))
forecast_wales_avg$Aggregated_Organisation <- factor(forecast_wales_avg$Aggregated_Organisation)
ggplot(forecast_wales_avg, aes(x = YearMonth, y = mean_attendance)) +
geom_line() +
labs(title = "Average Attendance Forecast",
x = "Year and Month",
y = "Average Attendance") +
facet_wrap(~Aggregated_Organisation, scales = "free_y") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 0, hjust = 1))
data_full <- data_grouped_age |>
aggregate_key((Aggregated_Organisation/Hospital_ItemName_ENG) * Grouped_Age, attendance = sum(Data))
filter_date <- yearmonth("2022 Jan")
fit <- data_full %>%
filter(yearmonth(YearMonth) <= filter_date) %>%
model(
base = ETS(attendance)
) %>%
reconcile(
bu = bottom_up(base),
wls = min_trace(base, method = "wls_struct"),
wls_ETS2 = min_trace(base, method = "wls_var"),
mint_ETS = min_trace(base, method = "mint_shrink"
) ) %>%
forecast(h = 6)
data_full <- data_grouped_age |>
aggregate_key((Aggregated_Organisation/Hospital_ItemName_ENG) * Grouped_Age, attendance = sum(Data))
filter_date <- yearmonth("2022 Jan")
fit <- data_full %>%
filter(yearmonth(YearMonth) <= filter_date) %>%
model(
base = ETS(attendance)
) %>%
reconcile(
bu = bottom_up(base),
wls = min_trace(base, method = "wls_struct"),
wls_ETS2 = min_trace(base, method = "wls_var")
) ) %>%
data_full <- data_grouped_age |>
aggregate_key((Aggregated_Organisation/Hospital_ItemName_ENG) * Grouped_Age, attendance = sum(Data))
filter_date <- yearmonth("2022 Jan")
fit <- data_full %>%
filter(yearmonth(YearMonth) <= filter_date) %>%
model(
base = ETS(attendance)
) %>%
reconcile(
bu = bottom_up(base),
wls = min_trace(base, method = "wls_struct"),
wls_ETS2 = min_trace(base, method = "wls_var")
)  %>%
forecast(h = 6)
for i in seq("rubberduck"){
data_full <- data_grouped_age |>
aggregate_key((Aggregated_Organisation/Hospital_ItemName_ENG) * Grouped_Age, attendance = sum(Data))
forecast_full <- data_full |>
model(ets = ETS(attendance)) |>
reconcile(bu = bottom_up(ets),
wls_ETS1 = min_trace(ets, method = "wls_struct"),
wls_ETS2 = min_trace(ets, method = "wls_var"),
mint_ETS = min_trace(ets, method = "mint_shrink")) %>%
forecast(h = 6)
data_full <- data_grouped_age |>
aggregate_key((Aggregated_Organisation/Hospital_ItemName_ENG) * Grouped_Age, attendance = sum(Data)) %>%
fill_gaps()
data_full %>%
group_by(Aggregated_Organisation, Hospital_ItemName_ENG, Grouped_Age) %>%
summarise(n = n()) %>%
arrange(n) %>%
ggplot(aes(x = Aggregated_Organisation, y = n)) +
geom_col() +
facet_wrap(~Hospital_ItemName_ENG + Grouped_Age, scales = "free") +
theme_minimal() +
labs(title = "Data Points Available for Each Time Series",
x = "Aggregated Organisation",
y = "Number of Data Points")
forecast_full <- data_full %>%
model(ets = ETS(attendance)) %>%
reconcile(bu = bottom_up(ets),
wls_ETS1 = min_trace(ets, method = "wls_struct"),
wls_ETS2 = min_trace(ets, method = "wls_var")) %>%
forecast(h = 6)
library(purrr)
filter_date <- yearmonth("2022 Jun")
fit <- data_full %>%
filter(yearmonth(YearMonth) <= filter_date) %>%
model(
base = ETS(attendance)
)
# Check for missing or infinite values in each model
models_have_issues <- any(map_lgl(fit, ~ any(is.infinite(pluck(.x, "attendance"))) || any(is.na(pluck(.x, "attendance")))))
if (models_have_issues) {
} else {
fc <- fit %>% forecast(h = 18)
# Check the forecast results or handle errors appropriately
if (!exists("fc")) {
cat("Forecasting failed. Please review your data and model.\n")
} else {
print(fc)
}
}
# Filter the forecast results for aggregated levels and plot
fc %>%
filter(is_aggregated(Hospital_ItemName_ENG), is_aggregated(Grouped_Age)) %>%
autoplot(
data_full %>% filter(yearmonth(YearMonth) >= yearmonth("2020 Jan")),
level = NULL
) +
labs(y = "Attendance ('000)") +
facet_wrap(vars(Aggregated_Organisation), scales = "free_y") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 0, hjust = 1))
data_full <- data_grouped_age |>
aggregate_key((Aggregated_Organisation/Hospital_ItemName_ENG) * Grouped_Age, attendance = sum(Data))
filter_date <- yearmonth("2022 Jan")
fit <- data_full %>%
filter(yearmonth(YearMonth) <= filter_date) %>%
model(
base = ETS(attendance)
) %>%
reconcile(
bu = bottom_up(base)
)  %>%
forecast(h = 6)
library(purrr)
filter_date <- yearmonth("2022 Jun")
fit <- data_full %>%
filter(yearmonth(YearMonth) <= filter_date) %>%
model(
base = ETS(attendance)
)
# Check for missing or infinite values in each model
models_have_issues <- any(map_lgl(fit, ~ any(is.infinite(pluck(.x, "attendance"))) || any(is.na(pluck(.x, "attendance")))))
if (models_have_issues) {
} else {
fc <- fit %>% forecast(h = 18)
# Check the forecast results or handle errors appropriately
if (!exists("fc")) {
cat("Forecasting failed. Please review your data and model.\n")
} else {
print(fc)
}
}
