stl(ts_data, s.window = "periodic")
})
# Convert the decompositions to a tidy data frame
stl_df <- purrr::map2_dfr(stl_decompositions, names(stl_decompositions),
~{
time_series <- as.data.frame(.x$time.series)
time_series$Aggregated_Organisation <- .y
return(time_series)
})
num_months <- length(unique(data2_hts$YearMonth))
num_orgs <- length(unique(data2_hts$Aggregated_Organisation))
# Correct assignment for YearMonth column
stl_df$YearMonth <- rep(unique(data2_hts$YearMonth), times = num_orgs)
stl_df_tidy <- stl_df %>%
tidyr::pivot_longer(cols = c(trend, seasonal, remainder),
names_to = "component",
values_to = "value")
stl_df_tidy %>%
ggplot(aes(x = YearMonth, y = value, color = component)) +
geom_line() +
facet_wrap(vars(Aggregated_Organisation), scales = "free_y", ncol = 3) +
labs(title = "STL Decomposition of ED Attendance",
y = "Number of Patients",
color = "Component") +
scale_color_manual(values = c("blue", "green", "red"),
breaks = c("trend", "seasonal", "remainder"),
labels = c("Trend", "Seasonal", "Residual")) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1))
unique(data_grouped$Age_Code)
data_grouped_age <- data_grouped %>%
filter(Age_Code != "Unknown") %>%
mutate(Grouped_Age = case_when(
Age_Code == "0 to 4" ~ "0-4",
Age_Code == "5 to 17" ~ "5-17",
Age_Code %in% c("18 to 24", "25 to 29", "30 to 34", "35 to 39",
"40 to 44", "45 to 49", "50 to 54", "55 to 59",
"60 to 64", "65 to 69") ~ "18-69",
Age_Code %in% c("70 to 74", "75 to 79", "80 to 84", "85") ~ "70 and over",
TRUE ~ "Other"
))
data_gts <- data_grouped_age %>%
filter(Sex_ItemName_ENG != "Not Specified or invalid") %>%
group_by(Grouped_Age, Sex_ItemName_ENG) %>%
summarize(Number = sum(Data, na.rm = TRUE))
ggplot(data_gts, aes(x = Grouped_Age, y = Number)) +
geom_bar(stat = "identity") +
labs(y = "Number of patients") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_wrap(~ Sex_ItemName_ENG, scales = "free")
#Change the data into wide format
data2_wide <- data_grouped %>%
group_by(Aggregated_Organisation) %>%
index_by(YearMonth) %>%
summarise(attendance = sum(Data)) %>%
pivot_wider(names_from = Aggregated_Organisation, values_from = attendance)
data2_wide <- as_tibble(data2_wide)
data2_wide <- data2_wide %>%
mutate(Total = rowSums(select(., c("Aneurin Bevan", "Betsi Cadwaladr", "Cardiff & Vale", "Grouped_4_organisation", "Hywel Dda", "Powys Teaching")), na.rm = TRUE))
# Define the forecast horizon and validation period
h <- 12
validation_period <- 6
# Splitting the data into training and testing sets
training_data <- head(data2_wide, nrow(data2_wide) - validation_period)
test_data <- tail(data2_wide, validation_period)
cols_to_forecast <- c("Aneurin Bevan", "Betsi Cadwaladr", "Cardiff & Vale", "Grouped_4_organisation", "Hywel Dda", "Powys Teaching", "Total")
forecast_list <- list()
arima_forecast_list <- list()
start_year <- year(min(training_data$YearMonth))
start_month <- month(min(training_data$YearMonth))
for (col in cols_to_forecast) {
ts_data <- ts(training_data[[col]], start = c(start_year, start_month), frequency = 12)
arima_model <- auto.arima(ts_data)
forecast_list[[col]] <- forecast(arima_model, h = h)
}
for (col in cols_to_forecast) {
end_year_train <- year(max(training_data$YearMonth))
end_month_train <- month(max(training_data$YearMonth))
start_year_test <- ifelse(end_month_train == 12, end_year_train + 1, end_year_train)
start_month_test <- ifelse(end_month_train == 12, 1, end_month_train + 1)
actual_ts <- ts(test_data[[col]], start = c(start_year_test, start_month_test), frequency = 12)
plot_forecast <- autoplot(forecast_list[[col]]) +
autolayer(actual_ts, series="Actual", PI=FALSE) +
labs(title = paste(col)) +
ylab("attendance") +
theme(legend.position = "bottom")
print(plot_forecast)
}
ets_forecast_list <- list()
start_year <- year(min(training_data$YearMonth))
start_month <- month(min(training_data$YearMonth))
for (col in cols_to_forecast) {
ts_data <- ts(training_data[[col]], start = c(start_year, start_month), frequency = 12)
ets_model <- ets(ts_data)  # Use the ets function
forecast_list[[col]] <- forecast(ets_model, h = h)
}
for (col in cols_to_forecast) {
end_year_train <- year(max(training_data$YearMonth))
end_month_train <- month(max(training_data$YearMonth))
start_year_test <- ifelse(end_month_train == 12, end_year_train + 1, end_year_train)
start_month_test <- ifelse(end_month_train == 12, 1, end_month_train + 1)
actual_ts <- ts(test_data[[col]], start = c(start_year_test, start_month_test), frequency = 12)
plot_forecast <- autoplot(forecast_list[[col]]) +
autolayer(actual_ts, series="Actual", PI=FALSE) +
labs(title = paste(col)) +
ylab("attendance") +
theme(legend.position = "bottom")
print(plot_forecast)
}
# Lists to store forecasts and error metrics
arima_forecast_list <- list()
ets_forecast_list <- list()
arima_error_metrics <- list()
ets_error_metrics <- list()
# Forecasting with ARIMA and ETS
for (col in cols_to_forecast) {
ts_data <- ts(training_data[[col]], start = c(start_year, start_month), frequency = 12)
# ARIMA model
arima_model <- auto.arima(ts_data)
arima_forecast <- forecast(arima_model, h = h)
arima_forecast_list[[col]] <- arima_forecast
# ETS model
tryCatch({
ets_model <- ets(ts_data)
ets_forecast <- forecast(ets_model, h = h)
ets_forecast_list[[col]] <- ets_forecast
}, error = function(e) {
cat("Error in forecasting for column:", col, "with message:", e$message, "\n")
})
}
for (col in cols_to_forecast) {
actual <- test_data[[col]]
arima_forecasted <- head(arima_forecast_list[[col]]$mean, validation_period)
# ARIMA metrics
arima_MAE <- mae(actual, arima_forecasted)
arima_RMSE <- rmse(actual, arima_forecasted)
arima_MAPE <- tryCatch(mape(actual, arima_forecasted), error = function(e) NA)
arima_error_metrics[[col]] <- list(MAE = arima_MAE, RMSE = arima_RMSE, MAPE = arima_MAPE)
# Check if ETS forecast exists for the column to avoid errors
if (!is.null(ets_forecast_list[[col]])) {
ets_forecasted <- head(ets_forecast_list[[col]]$mean, validation_period)
# ETS metrics
ets_MAE <- mae(actual, ets_forecasted)
ets_RMSE <- rmse(actual, ets_forecasted)
ets_MAPE <- tryCatch(mape(actual, ets_forecasted), error = function(e) NA)
ets_error_metrics[[col]] <- list(MAE = ets_MAE, RMSE = ets_RMSE, MAPE = ets_MAPE)
}
}
TableAccuracyMetrics <-
rbind(
# aggregate ARIMA accuracy metrics
as.data.frame(
do.call(rbind,unlist(arima_error_metrics, recursive=FALSE))
) |>
rename(Metric = V1) |>
rownames_to_column("LHB") |>
mutate(
Metric = round(Metric,3),
Model = "ARIMA"
),
# aggregate ETS accuracy metrics
as.data.frame(
do.call(rbind,unlist(ets_error_metrics, recursive=FALSE))
) |>
rename(Metric = V1) |>
rownames_to_column("LHB") |>
mutate(
Metric = round(Metric,3),
Model = "ETS"
)
) |>
## wrangle table from long to wide format
tidyr::pivot_wider(
names_from = Model,
values_from = Metric
)
TableAccuracyMetrics |> knitr::kable()
# hierarchy with age group
data_gts <- data_grouped_age |>
aggregate_key((Aggregated_Organisation / Hospital_ItemName_ENG) * Grouped_Age, attendance = sum(Data))
data_gts <- data_gts %>%
as_tsibble(key = c("Aggregated_Organisation", "Grouped_Age", "Hospital_ItemName_ENG"), index = "YearMonth")
library(dplyr)
# Define the expected number of rows for the entire time series
expected_length <- nrow(unique(data_gts[,"YearMonth"]))
# Obtain the data for the entire time series for the purpose of reconciliation
cleaned_data <- data_gts %>%
group_by(Aggregated_Organisation, Grouped_Age, Hospital_ItemName_ENG) %>%
filter(n() == expected_length) %>%
ungroup()
library(fable.tscount)
library(tscount)
# Split data
training_data <- cleaned_data %>%
filter(YearMonth <= yearmonth("2022 Jun"))
test_data <- cleaned_data %>%
filter(YearMonth > yearmonth("2022 Jun"))
test_data_filtered <- test_data %>%
filter(Aggregated_Organisation == "<aggregated>")
library(tsibble)
start_date <- min(training_data$YearMonth)
end_date <- max(training_data$YearMonth)
# Calculate the difference in months using yearmonth
number_of_months <- as.integer(yearmonth(end_date) - yearmonth(start_date)) + 1
number_of_months
data_gts_tr <- cleaned_data |>
stretch_tsibble(.init = 123, .step = 1)
filtered_tr <- data_gts_tr %>%
filter(Aggregated_Organisation == "<aggregated>")
data_gts_fc <-filtered_tr |>
model(
naive_model = NAIVE(attendance),
ets_model = ETS(attendance),
tscount = TSCOUNT(attendance ~ trend() + season() , link = "log", model = list(past_obs = 1:12))
)|> mutate (comb = (naive_model+ets_model+tscount)/3) %>%
forecast(h = 12)
merged_data <- left_join(as_tibble(data_gts_fc), as_tibble(test_data_filtered), by = c("YearMonth", "Aggregated_Organisation","Grouped_Age", "Hospital_ItemName_ENG"))
# Create an empty list to store results
results_list <- list()
# List of models
model_names <- unique(merged_data$.model)
# List of training datasets (using .id)
training_ids <- unique(merged_data$.id)
# Nested loop: first loop through models, then loop through training datasets
for (model in model_names) {
results_list[[model]] <- list()  # Initialize a nested list for each model
for (id in training_ids) {
# Filter the data for the current model and training dataset
subset_data <- merged_data %>% filter(.model == model & .id == id)
# Calculate MASE and RMSSE
mase_val <- mean(abs((subset_data$attendance.y - subset_data$.mean) /
(subset_data$attendance.y - lag(subset_data$attendance.y))), na.rm = TRUE)
rmsse_val <- sqrt(mean((subset_data$attendance.y - subset_data$.mean)^2, na.rm = TRUE))
# Store results in the nested list
results_list[[model]][[as.character(id)]] <- list(MASE = mase_val, RMSSE = rmsse_val)
}
}
# List to store averaged results
averaged_results <- list()
for (model in model_names) {
# Extract the list of results for the current model
model_results <- results_list[[model]]
# Calculate the average MASE and RMSSE over the 13 training datasets while removing NA values
avg_mase <- mean(sapply(model_results, function(x) x$MASE), na.rm = TRUE)
avg_rmsse <- mean(sapply(model_results, function(x) x$RMSSE), na.rm = TRUE)
# Store the averaged results
averaged_results[[model]] <- list(Avg_MASE = avg_mase, Avg_RMSSE = avg_rmsse)
}
# Convert averaged_results to a dataframe
averaged_df <- data.frame(model = names(averaged_results))
# Extract Avg_MASE and Avg_RMSSE values for each model
averaged_df$Avg_MASE <- sapply(averaged_results, function(x) x$Avg_MASE)
averaged_df$Avg_RMSSE <- sapply(averaged_results, function(x) x$Avg_RMSSE)
print(averaged_df)
library(fable.tscount)
library(tscount)
# Split data
training_data2 <- cleaned_data %>%
filter(YearMonth <= yearmonth("2021 Jan"))
test_data2 <- cleaned_data %>%
filter(YearMonth > yearmonth("2021 Jan"))
test_data_filtered2 <- test_data2 %>%
filter(is_aggregated(Aggregated_Organisation))
library(tsibble)
start_date <- min(training_data2$YearMonth)
end_date <- max(training_data2$YearMonth)
# Calculate the difference in months using yearmonth
number_of_months <- as.integer(yearmonth(end_date) - yearmonth(start_date)) + 1
number_of_months
data_gts_tr2 <- training_data2 |>
stretch_tsibble(.init = 94, .step = 1)
data_gts_fc2 <-filtered_tr2 |>
model(
naive_model = NAIVE(attendance),
ets_model = ETS(attendance),
tscount = TSCOUNT(attendance ~ trend() + season() , link = "log", model = list(past_obs = 1:12))
)|> mutate (comb = (naive_model+ets_model+tscount)/3) %>%
forecast(h = 29)
filtered_tr2 <- data_gts_tr2 %>%
filter(is_aggregated (Aggregated_Organisation))
data_gts_fc2 <-filtered_tr2 |>
model(
naive_model = NAIVE(attendance),
ets_model = ETS(attendance),
tscount = TSCOUNT(attendance ~ trend() + season() , link = "log", model = list(past_obs = 1:12))
)|> mutate (comb = (naive_model+ets_model+tscount)/3) %>%
forecast(h = 29)
View(data_gts_fc)
data_gts_fc <-data_gts_tr |>
model(
naive_model = NAIVE(attendance),
ets_model = ETS(attendance),
tscount = TSCOUNT(attendance ~ trend() + season() , link = "log", model = list(past_obs = 1:12))
)|> mutate (comb = (naive_model+ets_model+tscount)/3) %>%
forecast(h = 12)
filtered_tr <- data_gts_tr %>%
filter(Aggregated_Organisation == "<aggregated>")
data_gts_fc <-filtered_tr |>
model(
naive_model = NAIVE(attendance),
ets_model = ETS(attendance),
tscount = TSCOUNT(attendance ~ trend() + season() , link = "log", model = list(past_obs = 1:12))
)|> mutate (comb = (naive_model+ets_model+tscount)/3) %>%
forecast(h = 12)
data_gts_fc2 <-filtered_tr2 |>
model(
naive_model = NAIVE(attendance),
ets_model = ETS(attendance)
)|> mutate (comb = (naive_model+ets_model)/2) %>%
forecast(h = 29)
merged_data2 <- left_join(as_tibble(data_gts_fc2), as_tibble(test_data_filtered2), by = c("YearMonth", "Aggregated_Organisation","Grouped_Age", "Hospital_ItemName_ENG"))
# Create an empty list to store results
results_list <- list()
# List of models
model_names <- unique(merged_data2$.model)
# List of training datasets (using .id)
training_ids <- unique(merged_data2$.id)
# Nested loop: first loop through models, then loop through training datasets
for (model in model_names) {
results_list[[model]] <- list()  # Initialize a nested list for each model
for (id in training_ids) {
# Filter the data for the current model and training dataset
subset_data <- merged_data2 %>% filter(.model == model & .id == id)
# Calculate MASE and RMSSE
mase_val <- mean(abs((subset_data$attendance.y - subset_data$.mean) /
(subset_data$attendance.y - lag(subset_data$attendance.y))), na.rm = TRUE)
rmsse_val <- sqrt(mean((subset_data$attendance.y - subset_data$.mean)^2, na.rm = TRUE))
# Store results in the nested list
results_list[[model]][[as.character(id)]] <- list(MASE = mase_val, RMSSE = rmsse_val)
}
}
# List to store averaged results
averaged_results <- list()
for (model in model_names) {
# Extract the list of results for the current model
model_results <- results_list[[model]]
# Calculate the average MASE and RMSSE over the 13 training datasets while removing NA values
avg_mase <- mean(sapply(model_results, function(x) x$MASE), na.rm = TRUE)
avg_rmsse <- mean(sapply(model_results, function(x) x$RMSSE), na.rm = TRUE)
# Store the averaged results
averaged_results[[model]] <- list(Avg_MASE = avg_mase, Avg_RMSSE = avg_rmsse)
}
# Convert averaged_results to a dataframe
averaged_df2 <- data.frame(model = names(averaged_results))
# Extract Avg_MASE and Avg_RMSSE values for each model
averaged_df2$Avg_MASE <- sapply(averaged_results, function(x) x$Avg_MASE)
averaged_df2$Avg_RMSSE <- sapply(averaged_results, function(x) x$Avg_RMSSE)
print(averaged_df2)
merged_data2 <- left_join(as_tibble(data_gts_fc2), as_tibble(test_data_filtered2), by = c("YearMonth", "Aggregated_Organisation","Grouped_Age", "Hospital_ItemName_ENG"))
# Create an empty list to store results
results_list <- list()
# List of models
model_names <- unique(merged_data2$.model)
# List of training datasets (using .id)
training_ids <- unique(merged_data2$.id)
# Nested loop: first loop through models, then loop through training datasets
for (model in model_names) {
results_list[[model]] <- list()  # Initialize a nested list for each model
for (id in training_ids) {
# Filter the data for the current model and training dataset
subset_data <- merged_data2 %>% filter(.model == model & .id == id)
# Calculate MASE and RMSSE
mase_val <- mean(abs((subset_data$attendance.y - subset_data$.mean) /
(subset_data$attendance.y - lag(subset_data$attendance.y))), na.rm = TRUE)
rmsse_val <- sqrt(mean((subset_data$attendance.y - subset_data$.mean)^2, na.rm = TRUE))
# Store results in the nested list
results_list[[model]][[as.character(id)]] <- list(MASE = mase_val, RMSSE = rmsse_val)
}
}
# List to store averaged results
averaged_results <- list()
for (model in model_names) {
# Extract the list of results for the current model
model_results <- results_list[[model]]
# Calculate the average MASE and RMSSE over the 13 training datasets while removing NA values
avg_mase <- mean(sapply(model_results, function(x) x$MASE), na.rm = TRUE)
avg_rmsse <- mean(sapply(model_results, function(x) x$RMSSE), na.rm = TRUE)
# Store the averaged results
averaged_results[[model]] <- list(Avg_MASE = avg_mase, Avg_RMSSE = avg_rmsse)
}
# Convert averaged_results to a dataframe
averaged_df2 <- data.frame(model = names(averaged_results))
# Extract Avg_MASE and Avg_RMSSE values for each model
averaged_df2$Avg_MASE <- sapply(averaged_results, function(x) x$Avg_MASE)
averaged_df2$Avg_RMSSE <- sapply(averaged_results, function(x) x$Avg_RMSSE)
print(averaged_df2)
library(fable.tscount)
library(tscount)
# Split data
training_data2 <- cleaned_data %>%
filter(YearMonth <= yearmonth("2021 Jan"))
test_data2 <- cleaned_data %>%
filter(YearMonth > yearmonth("2021 Jan"))
test_data_filtered2 <- test_data2 %>%
filter(is_aggregated(Aggregated_Organisation))
library(tsibble)
start_date <- min(training_data2$YearMonth)
end_date <- max(training_data2$YearMonth)
# Calculate the difference in months using yearmonth
number_of_months <- as.integer(yearmonth(end_date) - yearmonth(start_date)) + 1
number_of_months
data_gts_tr2 <- training_data2 |>
stretch_tsibble(.init = 94, .step = 1)
filtered_tr2 <- data_gts_tr2 %>%
filter(is_aggregated (Aggregated_Organisation))
data_gts_fc2 <-filtered_tr2 |>
model(
naive_model = NAIVE(attendance),
ets_model = ETS(attendance),
tscount = TSCOUNT(attendance ~ trend() + season() , link = "log", model = list(past_obs = 1:12))
)|> mutate (comb = (naive_model+ets_model+tscount)/3) %>%
forecast(h = 29)
merged_data2 <- left_join(as_tibble(data_gts_fc2), as_tibble(test_data_filtered2), by = c("YearMonth", "Aggregated_Organisation","Grouped_Age", "Hospital_ItemName_ENG"))
# Create an empty list to store results
results_list <- list()
# List of models
model_names <- unique(merged_data2$.model)
# List of training datasets (using .id)
training_ids <- unique(merged_data2$.id)
# Nested loop: first loop through models, then loop through training datasets
for (model in model_names) {
results_list[[model]] <- list()  # Initialize a nested list for each model
for (id in training_ids) {
# Filter the data for the current model and training dataset
subset_data <- merged_data2 %>% filter(.model == model & .id == id)
# Calculate MASE and RMSSE
mase_val <- mean(abs((subset_data$attendance.y - subset_data$.mean) /
(subset_data$attendance.y - lag(subset_data$attendance.y))), na.rm = TRUE)
rmsse_val <- sqrt(mean((subset_data$attendance.y - subset_data$.mean)^2, na.rm = TRUE))
# Store results in the nested list
results_list[[model]][[as.character(id)]] <- list(MASE = mase_val, RMSSE = rmsse_val)
}
}
# List to store averaged results
averaged_results <- list()
for (model in model_names) {
# Extract the list of results for the current model
model_results <- results_list[[model]]
# Calculate the average MASE and RMSSE over the 13 training datasets while removing NA values
avg_mase <- mean(sapply(model_results, function(x) x$MASE), na.rm = TRUE)
avg_rmsse <- mean(sapply(model_results, function(x) x$RMSSE), na.rm = TRUE)
# Store the averaged results
averaged_results[[model]] <- list(Avg_MASE = avg_mase, Avg_RMSSE = avg_rmsse)
}
# Convert averaged_results to a dataframe
averaged_df2 <- data.frame(model = names(averaged_results))
# Extract Avg_MASE and Avg_RMSSE values for each model
averaged_df2$Avg_MASE <- sapply(averaged_results, function(x) x$Avg_MASE)
averaged_df2$Avg_RMSSE <- sapply(averaged_results, function(x) x$Avg_RMSSE)
print(averaged_df2)
data_gts_tr2 <- training_data2 |>
stretch_tsibble(.init = 106, .step = 1)
data_gts_tr2 <- training_data2 |>
stretch_tsibble(.init = 94, .step = 1)
library(igraph)
# Nodes data
nodes_df <- data.frame(
name = c("All Wales",
"Betsi Cadwaladr", "Hywel Dda", "Grouped_4_organisation",
"Cardiff & Vale", "Aneurin Bevan", "Powys Teaching",
"Ysbyty Glan Clwyd", "Wrexham Maelor Hospital", "Colwyn Bay Community Hospital",
"Holywell Community Hospital", "Mold Community Hospital"),
stringsAsFactors = FALSE
)
# Edges data
edges_df <- data.frame(
from = c(rep("All Wales", 6),
rep("Betsi Cadwaladr", 5)),
to = c("Betsi Cadwaladr", "Hywel Dda", "Grouped_4_organisation",
"Cardiff & Vale", "Aneurin Bevan", "Powys Teaching",
"Ysbyty Glan Clwyd", "Wrexham Maelor Hospital", "Colwyn Bay Community Hospital",
"Holywell Community Hospital", "Mold Community Hospital"),
stringsAsFactors = FALSE
)
graph <- graph_from_data_frame(d = edges_df, vertices = nodes_df, directed = TRUE)
vertex_colors <- c("skyblue", rep("lightgreen", 6), rep("lightpink", 5))
# Plot the graph
plot(graph,
vertex.size = 15,
vertex.label = NA,  # Do not add labels
vertex.color = vertex_colors,
edge.arrow.size = 0.5,
layout = layout.reingold.tilford(graph, root = 1))
legend("bottomright",
legend = V(graph)$name,
fill = vertex_colors,
cex = 0.5,
title = "Nodes",
box.lty = 0)
unique(data$Organisation)
citation(zoo)
citation(library(tidyverse))
citation("zoo")
citation("ggplot2")
citation("lubridate")
citation("tsibble")
citation("tidyverse")
citation("fpp3")
citation("hts")
citation("dplyr")
citation("tidyr")
citation("forecast")
citation("Metrics")
citation("purrr")
citation("stats")
citation("fable")
citation("igraph")
citation("ggraph")
citation("feasts")
citation("fable.tscount")
citation("tscount")
unique(data_grouped_age$Grouped_Age)
